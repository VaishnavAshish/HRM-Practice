<script src="js/gantt_6.1.7_enterprise/codebase/dhtmlxgantt.js"></script>
<link rel="stylesheet" href="js/gantt_6.1.7_enterprise/codebase/dhtmlxgantt.css">

<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_tooltip.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_tooltip.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_critical_path.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_keyboard_navigation.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_marker.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_grouping.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_multiselect.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_auto_scheduling.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_smart_rendering.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_csp.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_overlay.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_fullscreen.js"></script>
<script src="js/gantt_6.1.7_enterprise/codebase/ext/dhtmlxgantt_undo.js"></script>

<script src="https://export.dhtmlx.com/gantt/api.js?v=6.1.7" ></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js?v=6.1.6"></script>

<script src="js/notify.js"></script>
<script src="https://cdn.dhtmlx.com/edge/dhtmlx.js?v=6.1.7"></script>

<script src="js/TableEdit" ></script>

<script src="js/blockui.js" ></script>
<script src="js/jquery-ui.min.js" ></script>

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.16/moment-timezone-with-data.min.js"></script> -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js"></script>

<script src="https://cdn.dhtmlx.com/edge/skins/terrace/dhtmlx.css?v=6.1.7"></script>

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css?v=6.1.6">

<link href="css/bootstrap.min.css" >
<link rel="stylesheet" href="css/jquery-ui.css"/>


<link href="css/bootstrap-editable.css">
<script src="js/bootstrap.min.js"></script>
<script src="js/bootstrap-typeahead.js"></script>
<script src="js/bootstrap-editable.js"></script>
<link href="css/jui_docs.css">

<style>

  .task-color {
      background-color: #2A94d6;
  }

  .task-color .gantt_task_progress {
      background: #2a7fd6;
  }
  .task-color.gantt_critical_task{
      background-color: #e63030;
  }

  .selected-filter {
      background-color:#ecebea;
  }
  .ui-autocomplete{
      z-index:9999 !important;
  }
  .wait-overlay:after {
      content: '';
      position: absolute;
      background: white;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      opacity: .5;
  }

  .wait-overlay {
      position: relative;
  }
  .notifyjs-corner{
        z-index: 10000;
   }
  .dhtmlxcalendar_dhx_terrace.dhtmlxcalendar_in_input{
      z-index:10000 !important;
   }
  .slds-scope .slds-input[readonly]{
      padding-left: 0.75rem !important;
      border-color: rgb(221, 219, 218) !important;
  }

 .gantt_link_delete_btn div{
      background:red;
  }

  .customLookup{
      border-radius: 0;
      display: table-cell;
      position: relative;
      z-index: 2;
      float: left;
      width: 100%;
      margin-bottom: 0;
      padding: 4px 12px;
      font-size: 14px;
      line-height: 1.42857143;
      color: #555;
      background-color: #fff;
      border: 1px solid #ccc;
      height:30px;
      border-radius: 0px 4px 4px 0px;
      -webkit-box-sizing:border-box;
      -moz-box-sizing:border-box;
      box-sizing:border-box;
  }
  .ui-autocomplete{
      z-index:9999 !important;
  }
  .scheduleTabResource {
          margin-left: -30px;
          padding-left: 10px;
  }
  @media only screen and (max-width: 1366px) {
      .scheduleTabResource {
          margin-left: 0px;
          padding-left: 2px;
      }
  }

  .fa-times {color: red;}
  .bs, .fc-title, #displayBox, .gantt_container {
      font-family: "Salesforce Sans", Arial, sans-serif !important;
  }
  .project-phase {
      position: absolute;
      height: 10px;
      color: #ffffff;
  }
  .project-phase div {
      position: absolute;
  }
  .phase-left {
      left: 0px;
      border-width: 0px 0px 8px 7px;
      border-top-color: transparent;
      border-right-color: transparent !important;
      border-bottom-color: transparent !important;
  }
  .phase-left, .phase-right {
      top: 10px;
      background-color: transparent;
      border-style: solid;
      width: 0px;
      height: 0px;
  }
  .phase-right {
      right: 0px;
      border-width: 0px 7px 8px 0px;
      border-top-color: transparent;
      border-bottom-color: transparent !important;
      border-left-color: transparent;
  }
  .slack {
      position: absolute;
      border-radius: 0;
      opacity: 0.7;

      border: none;
      border-right: 1px solid #b6b6b6;
      margin-left: -2px;
      background: #b6b6b6;
      background: repeating-linear-gradient(
              45deg, #FFFFFF,
              #FFFFFF 5px,
              #b6b6b6 5px,
              #b6b6b6 10px
      );
  }
  .rotate-180 svg{
     transform: rotate(180deg);
 }
 .baseline {
  position: absolute;
  border-radius: 2px;
  opacity: 0.6;
  margin-top: -7px;
  height: 5px;
  background: #ffd180;
  border: 1px solid rgb(255, 153, 0);
}
 /*
  .baseline {
      position: absolute;
      border-radius: 2px;
      opacity: 0.6;
      margin-top: -12px;
      height: 3px;
      background: #ffd180;
      border: 1px solid rgb(255,153,0);
  }
  */
  .parent_project .gantt_last_cell .gantt_tree_content .gantt_grid_edit {
      visibility: hidden !important;

  }

  .dhx_modal_cover {
      display:none !important;
  }

  .text-uppercase {
      text-transform: uppercase;
  }

  #filterTag {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 100px;
      float: left;
      line-height: 15px;
  }
  .background-grey {
      background-color: #777;
      color: #fff;
      border-radius: .25em;
  }


  /* -----------ring style----------------- */
  .ct-ring-wrapper{
    display: inline-block;
      width:1.8rem;
      height:1.8rem;
  }
  .ct-check{
      opacity: 0;
  }
  .ct-complete .ct-mask{
      fill: #4bca81;
  }
  .ct-complete .ct-check{
      opacity: 1;
  }

  .ct-rotating {
    -webkit-animation: rotating 1s linear infinite;
    -moz-animation: rotating 1s linear infinite;
    -ms-animation: rotating 1s linear infinite;
    -o-animation: rotating 1s linear infinite;
    animation: rotating 1s linear infinite;
  }
  @-webkit-keyframes rotating /* Safari and Chrome */ {
    from {
      -webkit-transform: rotate(0deg);
      -o-transform: rotate(0deg);
      transform: rotate(0deg);
    }
    to {
      -webkit-transform: rotate(360deg);
      -o-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }
  @keyframes rotating {
    from {
      -ms-transform: rotate(0deg);
      -moz-transform: rotate(0deg);
      -webkit-transform: rotate(0deg);
      -o-transform: rotate(0deg);
      transform: rotate(0deg);
    }
    to {
      -ms-transform: rotate(360deg);
      -moz-transform: rotate(360deg);
      -webkit-transform: rotate(360deg);
      -o-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }


  .slds-scope .in-lightning label {
  line-height: 1.875rem;
      margin-right: 0;
  }

  .slds-scope .gantt_grid_head_cell {
      cursor: pointer;
  }

  .slds-scope .gantt_grid_head_add{
      fill : #0070d2
  }

  .slds-scope .gantt_grid_head_add{
      fill : #005fb2
  }

  .slds-scope .gantt_button_grid{
      cursor: pointer;
  }

  .slds-scope .gantt_grid_edit{
      fill : #4bca81;
      padding-right : 2.5px;

  }

  .slds-scope .gantt_grid_add{
      fill : #0070d2;
      padding-left : 2.5px;
  }

  .slds-scope .gantt_grid_edit:hover{
      fill:#04844b
  }

  .slds-scope .gantt_grid_add:hover{
      fill : #005fb2
  }

  .gantt_grid_head_cell.gantt_grid_head_buttons  {
      text-align : left !important
  }

  .dhtmlx_popup_button{
      height : auto !important
  }

  .dhtmlx_popup_button:first-child{
      background : #0070d2 !important ;
      border-color : #0070d2 !important;
      color : #fff !important;
  }

  .dhtmlx_popup_button{
      color : #0070d2 !important;
      font-weight : 100 !important;
  }

  .weekend {
      background: #a6a6a63d;
  }

  .gantt_selected .weekend {
      background: #f7eb91;
  }

  .fa {
      cursor: pointer;
      font-size: 14px;
      text-align: center;
      opacity: 0.2;
      padding: 5px;
  }

  .fa:hover {opacity: 1;}

  .fa-pencil {color: #ffa011;}

  .fa-plus {color: #328EA0;}


</style>

<script>
  //var isFromImportFile = false;
  Object.size = function(obj) {
      var size = 0, key;
      try{
          for (key in obj) {
              if (obj.hasOwnProperty(key)) size++;
          }
      }catch(e){}
      return size;
  };
  var weekday = {
      0 : "Sunday",
      1 : "Monday",
      2 : "Tuesday",
      3 : "Wednesday",
      4 : "Thursday",
      5 : "Friday",
      6 : "Saturday"
  };

  var taskFilter = 'All';
  var sprintTaskFilterArray = [];
  var sectionTaskFilterArray = [];
  var WEEK_START_DAY_INDEX = 0;
  var isCircularLink = false;
  var fromwindow = '';
  var WeekEndDays = [];
  var updateImportProjectTaskLinksCount = 0;

  var SHOW_BASELINE = false;
  // var namespacePrefix = '{!namespacePrefix}';
  // var ganttProjectId = <% = projectId %>;
  // var ganttProjectStartDate = <% = projectStartDate %>;
  // var isEnableTaskDelete = <% = isEnableTaskDelete %>;
  // var isDisableCreateTask = <% = isDisableCreateTask %>;
  // var readOnlyGantt = <% = readOnlyGantt %>;//Boolean
  // var currentUserLocale = <% = userLocale %>;
  // var loadmessage = <% = loadmessage %>;
  // var loadAllProjects =  ('true' === <% = loadAllProjects %>? true :false);
  // var isComponent =  ('true' === <% = isComponent %>? true :false);
  // var currentUserTimezone = <% = userTimezone %>;
  // var UserConfigurationForJs = {};
  // try{ UserConfigurationForJs = JSON.parse('{!JSENCODE(userConfigurationForJs)}'); }catch(e){}
  //var userPreferenceSetting = '';

  // if(loadAllProjects){
  //     isDisplayAssignedTasksOnly = false;
  // }

  /*try{
     if('{!userPreference}' != ''){
         userPreferenceSetting = JSON.parse('{!userPreference}');
     }
  }catch(e){console.log(e);}*/
  //var gantt_columns = userPreferenceSetting == '' ? UserConfigurationForJs[namespacePrefix + "Gantt_Columns__c"] : userPreferenceSetting.Gantt_Columns;
  // if(gantt_columns === undefined){
  var gantt_columns = 'text,status,owner,start_date,end_date';
  // }
  var gantt_columns_temp = gantt_columns.split(',');
  gantt_columns = {};
  gantt_columns_temp.forEach(function(element) {
      if(element !== undefined && element != '')
      gantt_columns[element] = true;
  });
  // var isDisableProjectResourceEdits = {!customUserConfiguration.Disable_Project_Resource_Edits__c};
  var visible_columns = {};
  // var userViewScale = userPreferenceSetting == '' ? UserConfigurationForJs[namespacePrefix + "Gantt_View_Scale__c"] : userPreferenceSetting.Gantt_View_Scale;
  var visible_column_count = Object.size(gantt_columns);
  var OVER_ALL_GANTT_VIEW = 'All';
  var GANTT_VIEWS = {
      "DAYS" : 1,
      "WEEKS" : 2,
      "MONTHS" : 3,
      "YEARS" : 4
  };


  var GANTT_VIEW_SCALE = GANTT_VIEWS["MONTHS"];
  var newTaskfieldsDetail = [];
  var taskStatusOptions = [];
  var taskConstraintTypeOptions = [];
  var GANTT_DATE_FORMAT = '%m/%d/%Y';

  var DEFAULT_SERVER_DATE_FORMAT = "%m/%d/%Y";
  var expandAll = true;

  // <apex:repeat value="{!taskStatus}" var="tStatus">
  //     taskStatusOptions.push({key:'{!tStatus}',label:'{!tStatus}'});
  // </apex:repeat>
  //
  // <apex:repeat value="{!taskConstraintTypes}" var="tConstraintType">
  //     taskConstraintTypeOptions.push({key:'{!tConstraintType}',label:'{!tConstraintType}'});
  // </apex:repeat>


  // var placeholderUserImage = "{!URLFOR($Resource.KrowResource, 'images/placeholdeuser.png')}";
  var isAutoSchedulingEnabled = true;
  var isTaskAutoSchedulingisEnabled = true;
  var date_to_str = gantt.date.date_to_str(gantt.config.task_date);
  var today =new Date();
  var todayMarker = gantt.addMarker({
      start_date: today,
      css: "today",
      text: "Today",
      title: "Today: " + date_to_str(today)
  });

  gantt.getMarker(todayMarker);
</script>

<script>
  // var _restEndpoints = {
  //     read_only :'{!salesforceBaseUrl}{!$Page.GanttDataProvider}?projectid={!projectId}&action=READ',
  //     read_only_all_project :'{!salesforceBaseUrl}{!$Page.GanttDataProvider}?action=READ&allproject=true',
  //     read_only_expand_all :'{!salesforceBaseUrl}{!$Page.GanttDataProvider}?projectid={!projectId}&action=READ&expandAll=true',
  //     read_write :'{!salesforceBaseUrl}{!$Page.GanttDataUpdater}?projectid={!projectId}',
  //     read_task_assignment :'{!salesforceBaseUrl}{!$Page.ReadonlyEndpoint}',
  //     read_lookup : '{!salesforceBaseUrl}{!$Page.ReadonlyEndpoint}'
  // }
  // var _PageActions = {
  //     updateOverAllGanttViewAndScaleSetting : '{!$RemoteAction.Gantt2Ctrl.updateOverAllGanttViewAndScaleSetting}',
  //     getNewTaskWithFieldDetails : '{!$RemoteAction.Gantt2Ctrl.getNewTaskWithFieldDetails}',
  //     loadTaskLinks : '{!$RemoteAction.Gantt2Ctrl.loadTaskLinks}' ,
  //     getEditTaskDetail : '{!$RemoteAction.Gantt2Ctrl.getEditTaskDetail}' ,
  //
  //     selectProjectResourceLikeName : '{!$RemoteAction.Gantt2Ctrl.selectProjectResourceLikeName}',
  //     selectProjectResourceWithDisableProjectResourceEdits : '{!$RemoteAction.Gantt2Ctrl.selectProjectResourceWithDisableProjectResourceEdits}',
  //     selectProjectResourceLikeNameWithUser : '{!$RemoteAction.Gantt2Ctrl.selectProjectResourceLikeNameWithUser}',
  //     addContributorsOnTask : '{!$RemoteAction.Gantt2Ctrl.addContributorsOnTask}',
  //     projectIdOfTask : '{!$RemoteAction.Gantt2Ctrl.projectIdOfTask}',
  //     deleteTaskAssignment : '{!$RemoteAction.Gantt2Ctrl.deleteTaskAssignment}',
  //     getTaskParentTasks :'{!$RemoteAction.Gantt2Ctrl.getTaskParentTasks}',
  //
  //     updateOwnerTaskAssignment : '{!$RemoteAction.Gantt2Ctrl.updateOwnerTaskAssignment}',
  //     updateTaskAssignment : '{!$RemoteAction.Gantt2Ctrl.updateTaskAssignment}',
  //     validateTaskAssignmentHoursBeforeSchedule : '{!$RemoteAction.Gantt2Ctrl.validateTaskAssignmentHoursBeforeSchedule}',
  //     updateTaskAssignmentHoldStatus : '{!$RemoteAction.Gantt2Ctrl.updateTaskAssignmentHoldStatus}',
  //     changeTaskSchedulingMode : '{!$RemoteAction.Gantt2Ctrl.changeTaskSchedulingMode}',
  //
  //     searchAccounts : '{!$RemoteAction.Gantt2Ctrl.searchAccounts}',
  //     saveGanttImportedProject : '{!$RemoteAction.Gantt2Ctrl.saveGanttImportedProject}',
  //     saveGanttImportedProjectTasks : '{!$RemoteAction.Gantt2Ctrl.saveGanttImportedProjectTasks}',
  //     updateGanttImportedTasks : '{!$RemoteAction.Gantt2Ctrl.updateGanttImportedTasks}',
  //     createGanttImportedTasksAssignment : '{!$RemoteAction.Gantt2Ctrl.createGanttImportedTasksAssignment}',
  //     updateImportProjectTaskLinks : '{!$RemoteAction.Gantt2Ctrl.updateImportProjectTaskLinks}',
  //     updateGanttImportedProjectTask : '{!$RemoteAction.Gantt2Ctrl.updateGanttImportedProjectTask}',
  //     deleteProjectById : '{!$RemoteAction.Gantt2Ctrl.deleteProjectById}',
  //     searchProjectRole : '{!$RemoteAction.Gantt2Ctrl.searchProjectRole}',
  //     searchSkills : '{!$RemoteAction.Gantt2Ctrl.searchSkills}',
  //     getTaskRoleAndSkills : '{!$RemoteAction.Gantt2Ctrl.getTaskRoleAndSkills}',
  //     loadProjectSections : '{!$RemoteAction.Gantt2Ctrl.loadProjectSections}'
  // }
  // var _PageURLs ={
  //     printProjectTasks : '{!$Page.Print_Project_Tasks}',
  // }

  // window.$Label = window.$Label || {};
  // $Label.Gantt_Link_Between_Project_and_Task = '{!JSENCODE($Label.krow__gantt_link_between_project_and_task)}';
  // $Label.Gantt_Link_Between_Different_Project_Task = '{!JSENCODE($Label.krow__gantt_link_between_different_project_task)}';

</script>

<!-- <apex:form >
  <apex:actionFunction name="backToProjectViewJs" action="{!backToProjectView}" rerender="none">
      <apex:param name="userPreferenceParam" assignTo="{!userPreference}" value="" />
  </apex:actionFunction>
  <apex:actionFunction name="redirectToGanttProjectJs" action="{!redirectToGanttProject}"  rerender="none">
      <apex:param name="ganttImpotedProjectId" assignTo="{!projectId}" value="" />
  </apex:actionFunction>
</apex:form> -->
<div class="Krow" id="blockPanel" style="display:none;">
  <div class="slds-spinner_container " style="background: rgba(0, 0, 0, 0.2);position : fixed ;">
      <div class="slds-spinner--brand slds-spinner slds-spinner--large" style="transform: translate(-50%, -50%) rotate(0deg);" role="alert">
          <span class="slds-assistive-text" style="top: 31px;position: relative !important;">Please Wait....</span>
          <div class="slds-spinner__dot-a"></div>
          <div class="slds-spinner__dot-b"></div>
      </div>
  </div>
</div>
<body class="slds-brand-band slds-brand-band_medium" >
  <div id="ganttToolbar">
      <!-- <apex:outputpanel rendered="{!loadAllProjects}"> -->
          <div class="slds-builder-toolbar" role="toolbar">
              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small" aria-label="Spinner">
                  <div class="gantt-operation-progress-ring ct-ring-wrapper" >
                      <svg aria-hidden="true" focusable="false"  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="1.8rem" height="1.8rem" >
                          <circle  cx="50%" cy="50%" fill="transparent" r="15.909091" stroke="#ddd" stroke-width="10"></circle>
                          <circle class="gantt-operation-progress-ring-slice ct-ring-slice" cx="50%" cy="50%" fill="transparent" r="15.909091" stroke="#4bca81" stroke-dasharray="" stroke-width="10" stroke-dashoffset="25">
                          </circle>
                          <circle class="ct-mask" cx="50%" cy="50%" fill="#FFFFFF" r="15"> </circle>
                          <polyline class="ct-check" fill="none" stroke="#fff" stroke-width="3" stroke-linecap="round" points="13,22 19,28 30,15" stroke-dasharray="100">
                          </polyline>
                      </svg>
                  </div>
              </div>


              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small slds-grid slds-grid_vertical-align-center" aria-label="Gantt Actions">
                  <div class="slds-radio_button-group in-lightning kw-radio-group-h slds-m-horizontal_x-small">
                        <span class="slds-button slds-radio_button">
                          <input type="radio" name="radio" id="g-grid" value="grid" onclick="toggleGanttChart('grid');"/>
                          <label class="slds-radio_button__label" for="g-grid"><span class="slds-radio_faux">Grid</span></label>
                        </span>
                        <span class="slds-button slds-radio_button">
                          <input type="radio" name="radio" id="g-chart" value="chart" onclick="toggleGanttChart('chart');"/>
                          <label class="slds-radio_button__label" for="g-chart"><span class="slds-radio_faux">Chart</span></label>
                        </span>
                        <span class="slds-button slds-radio_button active">
                          <input type="radio" name="radio" id="g-default" value="default" onclick="toggleGanttChart('default');"/>
                          <label class="slds-radio_button__label" for="g-default"><span class="slds-radio_faux">Default</span></label>
                        </span>
                  </div>
                  <div class="slds-button-group">
                      <button class="slds-button slds-button--neutral" title="<%= $Label.Krow_Gantt_Scale_Days %>" tabindex="-1" name="scaleDays" onclick="setGanttScaleConfig(1);">
                          <%= $Label.Krow_Gantt_Scale_Days %>
                          <span class="slds-assistive-text"><%= $Label.Krow_Gantt_Scale_Days %> </span>
                      </button>
                      <button class="slds-button slds-button--neutral" title="<%= $Label.Krow_Gantt_Scale_Weeks %>" tabindex="-1" name="scaleMonth" onclick="setGanttScaleConfig(2);">
                          <%= $Label.Krow_Gantt_Scale_Weeks %>
                          <span class="slds-assistive-text"><%= $Label.Krow_Gantt_Scale_Weeks %></span>
                      </button>
                      <button class="slds-button slds-button--neutral" title="<%= $Label.Krow_Gantt_Scale_Months %>" tabindex="-1" name="scaleYear" onclick="setGanttScaleConfig(3);">
                          <%= $Label.Krow_Gantt_Scale_Months %>
                          <span class="slds-assistive-text"><%= $Label.Krow_Gantt_Scale_Months %></span>
                      </button>

                  </div>
              </div>
              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small" aria-label="Project Name">
                  <div class=" slds-button-group slds-has-flexi-truncate slds-p-around_xx-small text-uppercase background-grey">
                          <strong id="filterTag" class="slds-p-around_xx-small" title="<%= projectName %>">
                              <%= projectName %>
                          </strong>
                  </div>
              </div>
              <!-- <div class="slds-builder-toolbar__actions slds-p-around_xx-small" aria-label="Document actions">
                  <div class="slds-dropdown-trigger slds-dropdown-trigger--click" style="display:none;" id="import-menu">
                      <button class="slds-button slds-button_neutral" aria-haspopup="true" title="Import" onclick="openImportModal();">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon_left">
                              <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/utility-sprite/svg/symbols.svg#share_file')}" xmlns:xlink="https://www.w3.org/1999/xlink"></use>
                          </svg>
                          <span>Import</span>
                      </button>
                  </div>
                  <div class="slds-dropdown-trigger slds-dropdown-trigger--click"  id="createNewActivityDiv">
                      <button class="slds-button slds-button_neutral" aria-haspopup="true" title="Export data" onclick="openNewActivityMenu(event,this);">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon_left">
                              <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/utility-sprite/svg/symbols.svg#add')}" xmlns:xlink="https://www.w3.org/1999/xlink"></use>
                          </svg>
                          <span>Export</span>
                      </button>
                      <div class="slds-dropdown slds-dropdown--right slds-nubbin--top-right">
                          <ul class="slds-dropdown__list" role="menu">
                              <li class="slds-dropdown__item" role="presentation">
                                  <a href="javascript:void(0);" onclick="exportToMSProject();" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Export To MS Project</span>
                                  </a>
                              </li>
                          </ul>
                      </div>
                  </div>

              </div> -->

              <!-- <nav id="importSavebuttonContainer" class="navbar navbar-default nav-update Krow" style="min-height: 50px; display: none;">
                  <button id="saveImportedProjectButton" type="button" class="slds-button slds-button--brand" style="margin: 10px;float: right;" data-project-info="" onclick="saveGanttProjectImportData(this)">Save</button>
                  <button type="button" class="slds-button slds-button--neutral" style="margin: 10px;float: right;" onclick="window.onbeforeunload = null;location.reload();">Cancel</button>
              </nav> -->
              <!-- <apex:outputpanel rendered="{!not(isComponent)}">
                  <div class="slds btn-group slds-p-around_xx-small" role="group">
                        <button id="backToPageBtn" type="button" class="slds-button slds-button--neutral " onclick="backToPage();">Back to Project</button>
                    </div>
              </apex:outputpanel> -->

          </div>
      <!-- </apex:outputpanel> -->
      <!-- <apex:outputpanel rendered="{!not(loadAllProjects)}">
          <div class="slds-builder-toolbar" role="toolbar">
              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small" aria-label="Project Name">
                  <div class="gantt-operation-progress-ring ct-ring-wrapper" >
                      <svg   aria-hidden="true" focusable="false"  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" width="1.8rem" height="1.8rem" >
                          <circle  cx="50%" cy="50%" fill="transparent" r="15.909091" stroke="#ddd" stroke-width="10"></circle>
                          <circle class="gantt-operation-progress-ring-slice ct-ring-slice" cx="50%" cy="50%" fill="transparent" r="15.909091" stroke="#4bca81" stroke-dasharray="" stroke-width="10" stroke-dashoffset="25">
                          </circle>
                          <circle class="ct-mask" cx="50%" cy="50%" fill="#FFFFFF" r="15"> </circle>
                          <polyline class="ct-check" fill="none" stroke="#fff" stroke-width="3" stroke-linecap="round" points="13,22 19,28 30,15" stroke-dasharray="100">
                          </polyline>
                      </svg>
                  </div>
              </div>

              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small slds-grid slds-grid_vertical-align-center" aria-label="Gantt Actions">
                  <div class="slds-button-group">
                      <button class="slds-button slds-button_icon slds-button_icon-border action" title="Indent" tabindex="0" name="indent" >
                          <svg class="slds-button__icon" aria-hidden="true">
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#richtextindent')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Indent</span>
                      </button>

                      <button class="slds-button slds-button_icon slds-button_icon-border action" title="Outdent" tabindex="0" name="outdent" >
                          <svg class="slds-button__icon" aria-hidden="true">
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#richtextoutdent')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Outdent</span>
                      </button>
                      <button class="slds-button slds-button_icon slds-button_icon-border" title="View Critical Path" tabindex="-1" name="criticalPath" onclick="viewGanttCriticalPath(this);" >
                          <img class="slds-button__icon" aria-hidden="true" src="{!URLFOR($Resource.KrowResource, '/images/critical-path.png')}" />
                          <span class="slds-assistive-text">View Critical Path</span>
                      </button>
                      <button class="slds-button slds-button_icon slds-button_icon-border" title="Toggle Baseline" tabindex="-1" name="toggleBaseline" onclick="showBaseline(this);">
                          <img class="slds-button__icon" aria-hidden="true" src="{!URLFOR($Resource.KrowResource, '/images/gantt-baseline.png')}" />
                          <span class="slds-assistive-text">Toggle Baseline</span>
                      </button>
                      <button class="slds-button slds-button_icon slds-button_icon-border" title="Reschedule Task" tabindex="-1" name="rescheduleTask" onclick="autoScheduleGantt();">
                          <img class="slds-button__icon" aria-hidden="true" src="{!URLFOR($Resource.KrowResource, '/images/cascade-icon.png')}" />
                          <span class="slds-assistive-text">Reschedule Task</span>
                      </button>
                      <button class="slds-button slds-button_icon slds-button_icon-border" title="Toggle Slack Time" tabindex="-1" name="toggleSlackTime" onclick="toggleSlack(this);">
                           <svg class="slds-button__icon" aria-hidden="true">
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#date_time')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Toggle Slack Time</span>
                      </button>
                  </div>

                  <div class="slds-button-group">
                      <button class="slds-button slds-button_icon slds-button_icon-border" title="Expand Full Screen" tabindex="-1" name="expandFullScreen" onclick="expandFullScreen(this);">
                           <svg class="slds-button__icon" aria-hidden="true">
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Expand Full Screen</span>
                      </button>

                      <button class="slds-button slds-button_icon slds-button_icon-border rotate-180" title="Expand/Collapse All" tabindex="-1" name="expandAllTasks" onclick="collapsedExpendGanttTaskTree(this);" id="expandAllTasks">
                          <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="24px" height="24px" viewBox="0 0 30.727 30.727" style="fill: #005fb2;width: 14px !important;height: 14px !important;enable-background:new 0 0 30.727 30.727;" xml:space="preserve" class="slds-button__icon">
                              <g>
                                  <path d="M2.5,19.393c-0.64,0-1.278-0.244-1.768-0.73c-0.977-0.979-0.977-2.561,0-3.535L15.363,0.498l14.63,14.629
                                  c0.978,0.975,0.978,2.559,0,3.535s-2.56,0.979-3.534,0L15.363,7.568L4.267,18.662C3.781,19.148,3.14,19.393,2.5,19.393z
                                  M29.994,29.496c0.979-0.977,0.979-2.559,0-3.533l-14.63-14.632l-14.63,14.63c-0.978,0.977-0.978,2.561,0,3.535
                                  c0.978,0.977,2.56,0.977,3.535,0L15.363,18.4l11.096,11.096c0.487,0.488,1.129,0.732,1.769,0.732
                                  C28.869,30.229,29.506,29.984,29.994,29.496z"></path>
                              </g>
                          </svg>
                      </button>
                  </div>

                  <div class="slds-radio_button-group in-lightning kw-radio-group-h slds-m-horizontal_x-small">
                        <span class="slds-button slds-radio_button">
                          <input type="radio" name="radio" id="g-grid" value="grid" onclick="toggleGanttChart('grid');"/>
                          <label class="slds-radio_button__label" for="g-grid"><span class="slds-radio_faux">Grid</span></label>
                        </span>
                        <span class="slds-button slds-radio_button">
                          <input type="radio" name="radio" id="g-chart" value="chart" onclick="toggleGanttChart('chart');"/>
                          <label class="slds-radio_button__label" for="g-chart"><span class="slds-radio_faux">Chart</span></label>
                        </span>
                        <span class="slds-button slds-radio_button active">
                          <input type="radio" name="radio" id="g-default" value="default" onclick="toggleGanttChart('default');"/>
                          <label class="slds-radio_button__label" for="g-default"><span class="slds-radio_faux">Default</span></label>
                        </span>
                  </div>

                  <div class="slds-button-group">
                      <button class="slds-button slds-button--neutral" title="{!$Label.Krow_Gantt_Scale_Days}" tabindex="-1" name="scaleDays" onclick="setGanttScaleConfig(1);">
                          {!$Label.Krow_Gantt_Scale_Days}
                          <span class="slds-assistive-text">{!$Label.Krow_Gantt_Scale_Days} </span>
                      </button>
                      <button class="slds-button slds-button--neutral" title="{!$Label.Krow_Gantt_Scale_Weeks}" tabindex="-1" name="scaleMonth" onclick="setGanttScaleConfig(2);">
                          {!$Label.Krow_Gantt_Scale_Weeks}
                          <span class="slds-assistive-text">{!$Label.Krow_Gantt_Scale_Weeks}</span>
                      </button>
                      <button class="slds-button slds-button--neutral" title="{!$Label.Krow_Gantt_Scale_Months}" tabindex="-1" name="scaleYear" onclick="setGanttScaleConfig(3);">
                          {!$Label.Krow_Gantt_Scale_Months}
                          <span class="slds-assistive-text">{!$Label.Krow_Gantt_Scale_Months}</span>
                      </button>


                  </div>

              </div>
              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small" aria-label="Task Filters" id="taskFilterCon">
                  <div class="slds-dropdown-trigger slds-dropdown-trigger--click" >
                      <button class="slds-button slds-button_neutral" aria-haspopup="true" title="Task filter" onclick="openNewActivityMenu(event,this);">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon_left">
                              <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/utility-sprite/svg/symbols.svg#filterList')}" xmlns:xlink="https://www.w3.org/1999/xlink"></use>
                          </svg>
                          <span>Task Filters</span>
                      </button>
                      <div class="slds-dropdown slds-dropdown--right slds-nubbin--top-right" id="filterOptionForTask">
                          <ul class="slds-dropdown__list" role="menu">
                              <li class="slds-dropdown__item selected-filter" role="presentation" filterType="All">
                                  <a href="javascript:void(0);" onclick="filterTaskData('All');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">All Tasks</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation" filterType="Completed">
                                  <a href="javascript:void(0);" onclick="filterTaskData('Completed');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Completed Tasks</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation" filterType="Milestone">
                                  <a href="javascript:void(0);" onclick="filterTaskData('Milestone');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Milestone Tasks</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation" filterType="Sprint">
                                  <a href="javascript:void(0);" onclick="filterTaskData('Sprint');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Sprint Tasks</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation" filterType="Active">
                                  <a href="javascript:void(0);" onclick="filterTaskData('Active');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Active Task</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation" filterType="Section" id="filterByProjectSections">
                                  <a href="javascript:void(0);" onclick="filterTaskData('projectSection');" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Project Section</span>
                                  </a>
                              </li>
                          </ul>
                      </div>
                  </div>
              </div>
              <div class="slds-builder-toolbar__item-group slds-p-around_xx-small" aria-label="Project Name">
                  <div class=" slds-button-group slds-has-flexi-truncate slds-p-around_xx-small text-uppercase background-grey">
                          <strong id="filterTag" class="slds-p-around_xx-small" title="{!projectName}">
                              {!projectName}
                          </strong>
                  </div>
              </div>
              <div class="slds-builder-toolbar__actions slds-p-around_xx-small" aria-label="Document actions">
                  <div class="slds-dropdown-trigger slds-dropdown-trigger--click"  id="createNewActivityDiv">
                      <button class="slds-button slds-button_neutral" aria-haspopup="true" title="Export data" onclick="openNewActivityMenu(event,this);">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon_left">
                              <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/utility-sprite/svg/symbols.svg#add')}" xmlns:xlink="https://www.w3.org/1999/xlink"></use>
                          </svg>
                          <span>Export</span>
                      </button>
                      <div class="slds-dropdown slds-dropdown--right slds-nubbin--top-right">
                          <ul class="slds-dropdown__list" role="menu">
                              <li class="slds-dropdown__item" role="presentation">
                                  <a href="javascript:void(0);" onclick="exportGanttTasks();" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Export To PDF</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation">
                                  <a href="javascript:void(0);" onclick="exportGanttTasksToPNG();" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Export To PNG</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation">
                                  <a href="javascript:void(0);" onclick="exportGanttTasksToCSV();" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Export To CSV</span>
                                  </a>
                              </li>
                              <li class="slds-dropdown__item" role="presentation">
                                  <a href="javascript:void(0);" onclick="exportToMSProject();" role="menuitem" tabindex="-1">
                                      <span class="slds-truncate">Export To MS Project</span>
                                  </a>
                              </li>
                          </ul>
                      </div>
                  </div>
              </div>
              <apex:outputpanel rendered="{!not(isComponent)}">
                  <div class="slds btn-group slds-p-around_xx-small" role="group">
                        <button id="backToPageBtn" type="button" class="slds-button slds-button--neutral " onclick="backToPage();">Back to Project</button>
                    </div>
              </apex:outputpanel>
          </div>

      </apex:outputpanel> -->

      <!-- Gantt edit task modal start  -->
      <!-- <div id="editTaskModal" >
          <div tabindex="-1" class="slds-modal">
              <div class="slds-modal__container" style="width:800px;max-width:800px;">
                  <div class="slds-modal__header">
                      <button class="slds-button slds-modal__close slds-button--icon-inverse" title="Close" name="close" id="closeNewTaskBtn">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                              <use xlink:href="{!URLFOR($Resource.Krow_Slds_New_UI, 'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Close</span>
                      </button>
                      <h2  class="slds-text-heading--medium">Edit Task</h2>
                  </div>
                  <div class="slds-modal__content" style="height: 70vh;">
                      <div class="slds-p-horizontal--medium" style="min-height: 380px;">
                          <div id="tab-wrapper">
                              <div class="slds-tabs--default">
                                  <ul class="slds-tabs--default__nav">
                                      <li class="slds-tabs--default__item slds-text-title--caps slds-active" title="" tab-target="task-general" id="newTaskGeneralTab">
                                          <a class="slds-tabs--default__link" href="javascript:void(0);" >
                                              General
                                          </a>
                                      </li>
                                      <li class="slds-tabs--default__item slds-text-title--caps" title="" tab-target="task-predecessor" id="newTaskPredecessorTab">
                                          <a class="slds-tabs--default__link" href="javascript:void(0);" >
                                              Predecessor
                                          </a>
                                      </li>
                                      <li class="slds-tabs--default__item slds-text-title--caps" title="" tab-target="resource-scheduler" id="newScheduleResourceTab" >
                                          <a class="slds-tabs--default__link" href="javascript:void(0);" >
                                              Schedule Resource
                                          </a>
                                      </li>
                                  </ul>

                                  <!-- TAB one START *************************** -->
                                  <!-- <div id="task-general" class="slds-tabs--default__content bs">

                                       Tab One Content Here
                                  </div> -->
                                  <!-- TAB one END *************************** -->

                                  <!-- TAB two START *************************** -->
                                  <!-- <div id="task-predecessor" class="slds-tabs--default__content slds-hide bs">
                                      <div id="taskPredecessorDiv">
                                          Tab Two Content Here
                                      </div>
                                  </div> -->
                                  <!-- TAB two END *************************** -->

                                   <!-- TAB three START *************************** -->
                                  <!-- <div id="resource-scheduler" class="slds-tabs--default__content slds-hide bs" > -->
                                      <!-- Schedule -->
                                      <!-- <input type="hidden" id="editedTaskSchId" value="" />
                                      <div class="">
                                          <div class="">
                                              <div class="row" id="task_dates">
                                                  <div class="col-xs-12 col-sm-6 col-lg-6">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="task_sch_st_date">{!$ObjectType.Task__c.fields.Start_Date__c.Label}</span>
                                                          <input class="form-control" placeholder="Start Date"
                                                              aria-describedby="task_sch_st_date" id="task_schedule_st_date"
                                                              disabled="disabled" />
                                                      </div>
                                                  </div>
                                                  <div class="col-xs-12 col-sm-6 col-lg-6"
                                                      style="padding-left: 0px !important;">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="task_sch_due_date" >{!$ObjectType.Task__c.fields.Due_Date__c.Label}</span>
                                                          <input class="form-control" placeholder="Due Date"
                                                              aria-describedby="task_sch_due_date" id="task_schedule_due_date"
                                                              disabled="disabled" />
                                                      </div>
                                                  </div>
                                              </div>
                                              <br />
                                              <br />
                                              <div class="row" id="task_schedule_input">
                                                  <div class="col-xs-12 col-sm-4 col-lg-4">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="Estimated">Estimate</span>
                                                          <input class="form-control" placeholder="Estimated Hours"
                                                              aria-describedby="Estimated" id="task_estimated_hours"
                                                              disabled="disabled" />
                                                      </div>
                                                  </div>
                                                  <div class="col-xs-12 col-sm-4 col-lg-4"
                                                      style="padding-left: 0px !important;">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="Scheduled">Scheduled</span>
                                                          <input class="form-control" placeholder="Scheduled Hours"
                                                              aria-describedby="Scheduled" id="task_scheduled_hours"
                                                              disabled="disabled" />
                                                      </div>
                                                  </div>
                                                  <div class="col-xs-12 col-sm-4 col-lg-4"
                                                      style="padding-left: 0px !important;">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="Variance">Variance</span>
                                                          <input class="form-control" placeholder="Variance"
                                                              aria-describedby="Variance" id="task_variance"
                                                              disabled="disabled" />
                                                      </div>
                                                  </div>
                                              </div>
                                              <br />
                                              <br />
                                              <div class="row">
                                                  <div class="col-xs-12 col-sm-6 col-lg-6" style="padding-left: 15px !important;">
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon" id="addResource" >Add Resource</span>
                                                          <input type="hidden" id="hidden_task_resource_id" value="" />
                                                          <input class="form-control"
                                                                 placeholder="New resource"
                                                                 aria-describedby="addResource"
                                                                 id="task_schedule" autofocus="autofocus" />
                                                      </div>
                                                  </div>
                                                  <div class="col-xs-12 col-sm-6 col-lg-6" >
                                                      <div class="input-group input-group-sm">
                                                          <span class="input-group-addon">Scheduling Mode</span>
                                                          <select class="form-control" data-previous-value="" onchange="changeTaskSchedulingMode(this);" id="scheduleModeTaskPicklist" style="width: 100% !important">
                                                              <apex:repeat value="{!taskSchedulingMode}" var="tsmode">
                                                                  <option value="{!tsmode}">{!taskSchedulingMode[tsmode]}</option>
                                                              </apex:repeat>
                                                          </select>
                                                      </div>
                                                  </div>
                                              </div>
                                          </div>
                                          <div class="">
                                              <hr style="" />
                                          </div>

                                           <div class="" style="margin-bottom: 20px;">
                                              <div class="" id="task-schedule-parent" style="border: 1px solid #ddd;">
                                                  <div class="">
                                                      <div class="">
                                                          <div class=""
                                                               >
                                                              <div class="slds-p-around_small slds-theme_shade" >
                                                                  <h4 class="panel-title">Assigned Resources</h4>
                                                              </div>
                                                              <div class="" >
                                                                 <style>
                                                                      .slds-scope .userImageDD {
                                                                          border-radius: 50%;
                                                                          height: 30px;
                                                                          width: 30px;
                                                                          border: 1px solid #d3d3d3;
                                                                      }
                                                                      .slds-scope .assigned-onwer-image {
                                                                          border: 2px solid #FFB75D;
                                                                      }
                                                                      .assign-urs-grid {
                                                                          padding-top:2px;
                                                                          padding-bottom:2px;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col{
                                                                          flex: none;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(1){
                                                                          width: 8%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(2){
                                                                          width: 25%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(3){
                                                                          width: 12%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(4){
                                                                          width: 12%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(5){
                                                                          width: 12%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(6){
                                                                          width: 10%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(7){
                                                                          width: 10%;
                                                                      }
                                                                      .assign-urs-grid .assign-urs-grid-col:nth-child(8){
                                                                          width: 10%;
                                                                      }
                                                                      body .scope-container{
                                                                          position: relative;
                                                                      }
                                                                      body .scope-container input[type=checkbox], body .scope-container input[type=radio] {
                                                                         height: 20px;
                                                                         width: 20px;
                                                                      }
                                                                      body .scope-container input[type=checkbox]:checked:after {
                                                                          box-sizing: content-box;
                                                                          -webkit-transform: translate(0, 0) rotate(-45deg);
                                                                          transform: translate(0, 0) rotate(-45deg);
                                                                          position: absolute;
                                                                          top: 4px;
                                                                          left: 3px;
                                                                      }

                                                                      body .scope-container input[type=checkbox]:checked:before {
                                                                          background: #2a94d6;
                                                                          border: none;
                                                                      }


                                                                      #resourcePanels .form-control.input-sm{
                                                                          width:100%;
                                                                      }

                                                                      .available-urs-grid {
                                                                          padding-top:2px;
                                                                          padding-bottom:2px;
                                                                      }
                                                                      .available-urs-grid .available-urs-grid-col{
                                                                          flex: none;
                                                                      }
                                                                      .available-urs-grid .available-urs-grid-col:nth-child(1){
                                                                          width: 40%;
                                                                      }
                                                                      .available-urs-grid .available-urs-grid-col:nth-child(2){
                                                                          width: 20%;
                                                                      }
                                                                      .available-urs-grid .available-urs-grid-col:nth-child(3){
                                                                          width: 35%;
                                                                      }
                                                                      .available-urs-grid .available-urs-grid-col:nth-child(4){
                                                                          width: 5%;
                                                                      }
                                                                      .rs-sch-hours, .rs-avl-hours {
                                                                          min-height: 30px;
                                                                      }


                                                                 </style>
                                                                  <div class="task_schedule_container">
                                                                      <div class="assign-urs-grid slds-grid slds-has-divider--bottom">
                                                                          <div class="assign-urs-grid-col" style="padding-left:4px;">
                                                                              Owner
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              Resource
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              Role
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              Start Date
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              End Date
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              Hours
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              %
                                                                          </div>
                                                                          <div class="assign-urs-grid-col">
                                                                              Hold
                                                                          </div>
                                                                      </div>
                                                                  </div>


                                                                  <div class="task_schedule_container" style="margin-bottom: 20px;">
                                                                      <div class="" role="tablist"
                                                                           id="resourcePanels" aria-multiselectable="false">
                                                                      </div>
                                                                  </div>

                                                              </div>
                                                          </div>

                                                      </div>
                                                  </div>

                                              </div>
                                          </div>
                                          <div class="">
                                              <div class="" id="availableResourcePanels" style="border: 1px solid #ddd;">
                                                  <div class="">
                                                      <div class="">
                                                          <div class=""
                                                               >
                                                              <div class="slds-p-horizontal_small slds-theme_shade" style="">
                                                                  <div class="slds-grid slds-grid--vertical-align-center">
                                                                      <div class="slds-has-flexi-truncate slds-p-vertical_medium">
                                                                          <h4 class="panel-title">Available Resource </h4>
                                                                      </div>
                                                                      <div class="slds-no-flex">
                                                                          <button class="slds-button slds-button--brand" onclick="showResourceRoleSkillModal();" type="button">
                                                                              Search for Resources
                                                                          </button>
                                                                          <button class="slds-button slds-button--brand"  id="showDisplayAllResourceOnScheduleBtn" onclick="showDisplayAllResourceAvailableResource();" type="button">
                                                                             Display All
                                                                          </button>
                                                                      </div>
                                                                  </div>
                                                              </div>
                                                              <div class="" >

                                                                  <div class="available_resource_header">
                                                                      <div class="available-urs-grid slds-grid slds-has-divider--bottom">
                                                                          <div class="available-urs-grid-col slds-p-left--small">
                                                                              Resource
                                                                          </div>
                                                                          <div class="available-urs-grid-col">
                                                                              Role
                                                                          </div>
                                                                          <div class="available-urs-grid-col">
                                                                             <div class="slds-grid">
                                                                                 <div class="slds-col">
                                                                                     Scheduled Hours
                                                                                 </div>
                                                                                 <div class="slds-col">
                                                                                     Available Hours
                                                                                 </div>
                                                                             </div>
                                                                          </div>
                                                                          <div class="available-urs-grid-col">

                                                                          </div>
                                                                      </div>


                                                                  </div>


                                                                  <div class="">
                                                                      <div class="" role="tablist"
                                                                           id="available_resource_list" aria-multiselectable="false">
                                                                      </div>
                                                                  </div>

                                                              </div>
                                                          </div>

                                                      </div>
                                                  </div>

                                              </div>
                                          </div>

                                      </div> -->

                                      <!-- End Schedule -->


                                  <!-- </div> -->
                                  <!-- TAB three END *************************** -->
                              <!-- </div>
                          </div>
                      </div>
                  </div>
                  <div class="slds-modal__footer">
                      <div class="slds-grid">
                          <div>
                              <button class="slds-button slds-button--destructive" id="deleteTaskBtn" name="delete" >Delete</button>
                          </div>
                          <div class="slds-col--bump-left">
                              <button class="slds-button slds-button--neutral" id="cancelEditTaskBtn" name="cancel">Close</button>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="slds-backdrop"></div>
      </div> -->
      <!-- Gantt edit task modal start End  -->

      <!-- (Task SCHEDULE Tab) Modal to Search Role or skills  -->
      <!-- <div id="searchTaskRoleSkillsModel" class="Krow">
          <div class="slds-modal">
              <div class="slds-modal__container">
                  <div class="slds-modal__header" style="padding-bottom: 0px;border-bottom: none;">
                      <span class="slds-text-color--weak slds-text slds-text-title--caps">Search by Role &amp; Skills &amp; Status</span>
                      <button class="slds-button slds-button--icon-inverse slds-modal__close" onclick="closesearchTaskRoleSkillsModel();">
                          <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                              <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
                          </svg>
                          <span class="slds-assistive-text">Close</span>
                      </button>
                  </div>
                  <div class="slds-modal__content slds-p-around--large">
                      <div id="searchProjectRole_input">
                          <div class="slds-form-element slds-m-bottom--medium bs">
                              <label class="slds-form-element__label" for="searchTaskRoleTxt">Project Role</label>
                              <div class="selectedTaskRoleList slds-pill_container "></div>
                              <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                                  <svg class="slds-input__icon slds-icon-text-default">
                                      <use xlink:href="{!URLFOR($Resource.Krow_Slds_New_UI, 'assets/icons/action-sprite/svg/symbols.svg#search')}"></use>
                                  </svg>
                                  <input type="text" id="searchTaskRoleTxt" class="slds-input searchTaskRoleTxt" data-provide="typeahead" data-minLength="1" placeholder="Search Project Role" />
                              </div>
                          </div>
                      </div>
                      <div id="searchSkills_input">
                          <div class="slds-form-element slds-m-bottom--medium bs">
                              <label class="slds-form-element__label" for="searchTaskSkillsTxt">Skills</label>
                              <div class="slds-pill_container selectedTaskSkillsList" id="selectedTaskSkillsList"> </div>
                              <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                                  <svg class="slds-input__icon slds-icon-text-default">
                                      <use xlink:href="{!URLFOR($Resource.Krow_Slds_New_UI, 'assets/icons/action-sprite/svg/symbols.svg#search')}"></use>
                                  </svg>
                                  <input type="text" id="searchTaskSkillsTxt" class="slds-input searchTaskSkillsTxt" data-provide="typeahead" data-minLength="1" placeholder="Search by Skills" />
                              </div>
                          </div>
                      </div>
                      <span class="slds-form-element__label" style="font-weight: 700;">Status</span>
                      <div class="slds-modal__content slds-p-around--large" style="padding: 7px;box-shadow: 0px 2px 3px 2px rgba(0, 0, 0, 0.16);" id="modal-filter-pa-by-status-body">
                          <apex:repeat value="{!paStatusPickListPropertiesOnScheduleTab}" var="paStatus" >
                              <div class="slds-form-element slds-m-bottom--small">
                                <div class="slds-form-element__control">
                                  <span class="slds-checkbox">
                                    <input type="checkbox" name="paStatus_checkbox" value="{!paStatus}" id="paStatuscheckIt{!paStatus}" class="cursor-pointer" checked="" />
                                    <label class="slds-checkbox__label" for="paStatuscheckIt{!paStatus}">
                                      <span class="slds-checkbox--faux"></span>
                                      <span class="slds-form-element__label">{!paStatus}</span>
                                    </label>
                                  </span>
                                </div>
                              </div>
                          </apex:repeat>
                      </div>
                  </div>
                  <div class="slds-modal__footer">
                      <button class="slds-button slds-button--brand" type="button" onclick="searchTaskResourcesByRoleAndSkills();">Search</button>
                      <button class="slds-button slds-button--neutral" type="button" onclick="closesearchTaskRoleSkillsModel();">Close</button>
                  </div>
              </div>
          </div>
          <div class="slds-backdrop"></div>
      </div> -->
      <!-- END (Task SCHEDULE Tab) Modal to Search Role or skills  -->

       <!-- Modal for filter sprint  -->
            <!-- <div id="sprintFilterModal" class="Krow">
              <div class="slds-modal">
                  <div class="slds-modal__container">
                      <div class="slds-modal__header">
                          <span class="slds-text-color--weak slds-text slds-text-title--caps">Filter Tasks By Sprint</span>
                          <button class="slds-button slds-button--icon-inverse slds-modal__close" onclick="closeModal('sprintFilterModal');">
                              <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                  <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
                              </svg>
                              <span class="slds-assistive-text">Close</span>
                          </button>
                      </div>
                      <div  class="slds-modal__content slds-p-around--large">
                          <div class="slds-form-element slds-m-bottom--small">
                                    <label class="slds-form-element__label" for="taskSprintFilterOption">Sprint&nbsp;&nbsp;&nbsp;&nbsp;</label>
                                    <div class="slds-form-element__control">
                                      <div class="slds-select_container">
                                        <select class="slds-select" multiple="multiple" id="taskSprintFilterOption">
                                              <apex:repeat value="{!taskSprintOptions}" var="optionObj" id="taskSprintRepeat">
                                                  <option value="{!optionObj}">{!optionObj}</option>
                                              </apex:repeat>
                                       </select>
                                      </div>
                                    </div>
                          </div>
                      </div>
                      <div class="slds-modal__footer">
                          <button class="slds-button slds-button--neutral" id="filterBySprintOkBtn" onClick="filterSprintTasks();">Display Tasks</button>
                          <button class="slds-button slds-button--brand" onclick="closeModal('sprintFilterModal');">{!$Label.Task_FilterBy_Close_Button}</button>
                      </div>
                  </div>
              </div>
              <div class="slds-backdrop"></div>
          </div> -->
  <!-- END -->
  <!-- Modal for filter sprint  -->
           <!-- <div id="SectionFilterModal" class="Krow">
             <div class="slds-modal">
                 <div class="slds-modal__container">
                     <div class="slds-modal__header">
                         <span class="slds-text-color--weak slds-text slds-text-title--caps">Filter Tasks By Project Section</span>
                         <button class="slds-button slds-button--icon-inverse slds-modal__close" onclick="closeModal('SectionFilterModal');">
                             <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                 <use xlink:href="{!URLFOR($Asset.SLDS,'assets/icons/action-sprite/svg/symbols.svg#close')}"></use>
                             </svg>
                             <span class="slds-assistive-text">Close</span>
                         </button>
                     </div>
                     <div  class="slds-modal__content slds-p-around--large">
                         <div class="slds-form-element slds-m-bottom--small">
                                   <div class="slds-form-element__control">
                                       <div id="projectCustomSectionList" class="projectCustomSection"></div>
                                   </div>
                         </div>
                     </div>
                     <div class="slds-modal__footer">
                         <button class="slds-button slds-button--neutral" id="filterBySectionOkBtn" onClick="filterProjectSectionTasks();">Display Tasks</button>
                         <button class="slds-button slds-button--brand" onclick="closeModal('SectionFilterModal');">{!$Label.Task_FilterBy_Close_Button}</button>
                     </div>
                 </div>
             </div>
             <div class="slds-backdrop"></div>
         </div> -->
 <!-- END -->
  </div>
  <div class="slds-m-around_small" >
      <div id="d3" style='width:100%; height:100%;'></div>
  </div>
</body>


<script>
var projectData = {};
var overlayControl = gantt.ext.overlay;
var lineOverlay  = {};
var dateToStr = gantt.date.date_to_str("%F %j, %Y");
var today = new Date(2019, 3, 14);


var newTaskLinks = [];
var newTaskLinksWithSourceTaskId = [];

//Schedule resource code

var isRoleStateView = true;
var reloadWithoutHours = false;
var taskRoleSearchIds = [];
var taskskillsSearchIds = [];
var paStatus = [];
var showAvailableResource = false;
var specificResourceId = '';
var showProjectTeam = false;
var showAllResourceOnSchedule = false;
var isFailureOccure = false;
var isTaskScheduleUIUpdate = false;
var taskStartDateTemp = '' ;
var taskEndDateTemp = '';
var FIELD_TYPE_REFRENCE = 'REFERENCE';
var filterValue = "";
var timer;
var pendingUpdatesMap = new Array();

var gridOnlyLayout = {
    css: 'gantt_container',
    cols: [
      {
        rows: [
          { view: 'grid', scrollX: 'gridScrollX', scrollable: true, scrollY: "scrollVer"},
          { view: 'scrollbar', id: 'gridScrollX', group: 'horizontal' },
        ]
      },
      { view: 'scrollbar', id: 'scrollVer' }
      ]
  };

  var chartOnlyLayout = {
    css: 'gantt_container',
    cols: [
      {
      rows: [
          { view: 'timeline', scrollX: 'scrollHor', scrollY: 'scrollVer' },
          { view: 'scrollbar', id: 'scrollHor', group: 'horizontal' },
        ]
      },
      { view: 'scrollbar', id: 'scrollVer' }
      ]
  };
 var gridTimelineLayout  = {
      css: "gantt_container",
      cols: [
          {
              width:400,
              min_width: 300,
              rows:[
                  {view: "grid", scrollX: "gridScroll", scrollable: true, scrollY: "scrollVer"},
                  {view: "scrollbar", id: "gridScroll", group:"horizontal"}
              ]
          },
          {resizer: true, width: 1},
          {
              rows:[
                  {view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
                  {view: "scrollbar", id: "scrollHor", group:"horizontal"}
              ]
          },
          {view: "scrollbar", id: "scrollVer"}
      ]
  };

var defaultGanttLayout = {
  css: "gantt_container",
  rows:[
      {
          cols: [
              {
                  // the default grid view
                  view: "grid",
                  scrollX:"scrollHor",
                  scrollY:"scrollVer"
              },
              { resizer: true, width: 1 },
              {
                  // the default timeline view
                  view: "timeline",
                  scrollX:"scrollHor",
                  scrollY:"scrollVer"
              },
              {
                  view: "scrollbar",
                  id:"scrollVer"
              }
          ]},
      {
          view: "scrollbar",
          id:"scrollHor"
      }
  ]
};




function delayedCall(action){


  var result = pendingUpdatesMap.findIndex( findIndex => findIndex.id === action.id );
  if(result !== -1){
      pendingUpdatesMap[result] = action;
  }else{
     pendingUpdatesMap.push(action);
  }

 clearTimeout(timer);
 timer = setTimeout(function(){
  var reqData = pendingUpdatesMap;
  pendingUpdatesMap = new Array();
  if(reqData.length>0){
          $('.gantt-operation-progress-ring').removeClass('ct-complete');
          $('.gantt-operation-progress-ring').addClass('ct-rotating');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"75 25");

          $(".gantt-operation-progress-ring").notify(
            `${reqData.length} related tasks/links are updating, Please wait to complete.`,
            { position:"bottom", clickToHide: true, autoHide: false, hideDuration: 10000, className: 'notify',
             }
          );


         $.ajax({
             url: _restEndpoints.read_write,
             data: {'data':JSON.stringify(Array.from(reqData))},
             type: 'POST',
         }).done(function(response) {
             unBlockUI("task-field-template");
              setTimeout(function(){
              $(".notifyjs-container").trigger('notify-hide');
              },5000);


          $("#ganttToolbar").removeClass('wait-overlay');
          $('.gantt-operation-progress-ring').removeClass('ct-rotating');
          $('.gantt-operation-progress-ring').addClass('ct-complete');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"100 0");
          if(typeof response == 'object'){
              if(response.status !== undefined && response.status === "fail"){
                  $.notify('failed to save changes Error ' + response.message, {
                   position : 'top left',
                   style : 'bootstrap',
                   className : 'error'
               });
                  undoGanttChanges();
              }else{

                  for (var key in response){

                      if(response[key] !== 'deleted' && response[key] !== 'updated'){
                          if(gantt.getLink(key) !== undefined){
                              var newLinkKey = response[key];
                              gantt.changeLinkId(key, newLinkKey);
                              gantt.refreshLink(newLinkKey);
                          }else if(gantt.getTask(key) !== undefined){
                              var newTaskData = response[key];
                              var oldTaskData = gantt.getTask(key);

                              if(key.length<15){
                                  gantt.changeTaskId(key, newTaskData.id);
                                  oldTaskData.$new = false;
                                  //gantt.showTask(newTaskData.id);
                                  //gantt.selectTask(newTaskData.id);
                              }

                              for(key in newTaskData){
                                 oldTaskData[key] = newTaskData[key];
                              }
                              var formatToGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
                              oldTaskData.start_date = formatToGanttDate(newTaskData['start_date']);
                              oldTaskData.end_date = gantt.calculateEndDate(oldTaskData);

                              gantt.refreshTask(newTaskData.id);
                              if(gantt.getTask(gantt.getTask(newTaskData.id).parent).duration == 0){
                                  let parentTaskData = gantt.getTask(gantt.getTask(newTaskData.id).parent);
                                  parentTaskData.duration = 1;
                                  parentTaskData.end_date = gantt.calculateEndDate(parentTaskData);
                                  gantt.refreshTask(parentTaskData.id);
                              }

                          }else{
                              // id deleted, do not exists on gantt.
                          }
                      }else{
                          // IGNORE If link deleted, task deleted and link updated.
                      }
                  }
              }
          }else{
              var el = $( '<div></div>' );
              el.html(response);
              gantt.alert({
                  text:'System error occured. ' + $("#bodyCell span",el).eq(1).text(),
                  title:'Error:' + $("#bodyCell span",el).eq(2).text(),
                  ok:"Yes",
                  callback:function(){
                      undoGanttChanges();
                  }
              });
          }
         }).fail(function(exceptionData) {
             unBlockUI("task-field-template");
              setTimeout(function(){
              $(".notifyjs-container").trigger('notify-hide');
              },3000);

            $("#ganttToolbar").removeClass('wait-overlay');

             console.log('exceptionData' + exceptionData);
             undoGanttChanges();
             $.notify('Failed to save data.', {
                 position : 'top left',
                 style : 'bootstrap',
                 className : 'error'
             });
         });
      }
 }, 500);
}

function undoGanttChanges(){
  gantt.undo();
  //gantt.clearUndoStack();
}

function unBlockUI(container){
  if($('#blockPanel').length > 0){
      $('#blockPanel').hide();
  }else{
      container = "#"+container;
      //$(container).fadeTo("slow", 1);
      $.unblockUI();
  }
}

function blockUI(container){
  try{
  if($('#blockPanel').length > 0){
      $('#blockMessageSpan1').html('please wait....');
      $('#blockPanel').show();
  }else{
      container = "#"+container;
      if($('#displayBox').length == 0){
          try{
          $('.bs').after(displayBoxContainer.clone());
          }catch(e){console.log(e);}
      }
      $.blockUI({
          message: $('#displayBox'),
          css: {
              top: ($(window).height()) / 2 + 'px',
              left: ($(window).width() - 400) / 2 + 'px',
              width: '400px'
          }
      });
    }
  }catch(e){console.log(e)}
}


function normalizeDateDisplay(mydate){
try{

     mydate = new Date(mydate);

     mydate.getTimezoneOffset();

     var _helsenkiOffset = 2*60*60000;
     var _userOffset = mydate.getTimezoneOffset()*60000;
     mydate = new Date(mydate.getTime()+_helsenkiOffset+_userOffset);

     //var dateToshow = mydate.format(currentUserDateFormat);
     var dateToshow = moment(mydate).format('ll');
     return dateToshow;
}
catch(e){return mydate;}
}

function getLocaleDateString(currentUserLocale) {
  var formats = {
      af_ZA: "yyyy/mm/dd",
      am_ET: "d/m/yyyy",
      ar: "dd/mm/yy",
      ar_AE: "dd/mm/yyyy",
      ar_BH: "dd/mm/yyyy",
      ar_DZ: "dd-mm-yyyy",
      ar_EG: "dd/mm/yyyy",
      ar_IQ: "dd/mm/yyyy",
      ar_JO: "dd/mm/yyyy",
      ar_KW: "dd/mm/yyyy",
      ar_LB: "dd/mm/yyyy",
      ar_LY: "dd/mm/yyyy",
      ar_mA: "dd-mm-yyyy",
      ar_Om: "dd/mm/yyyy",
      ar_QA: "dd/mm/yyyy",
      ar_SA: "dd/mm/yy",
      ar_SY: "dd/mm/yyyy",
      ar_TN: "dd-mm-yyyy",
      ar_YE: "dd/mm/yyyy",
      arn_CL: "dd-mm-yyyy",
      as_IN: "dd-mm-yyyy",
      az_AZ: "dd.mm.yyyy",
      az_Cyrl_AZ: "dd.mm.yyyy",
      az_Latn_AZ: "dd.mm.yyyy",
      ba_RU: "dd.mm.yy",
      be_BY: "dd.mm.yyyy",
      bg: "dd.m.yyyy",
      bg_BG: "dd.m.yyyy",
      bn_BD: "dd-mm-yy",
      bn_IN: "dd-mm-yy",
      bo_CN: "yyyy/m/d",
      br_FR: "dd/mm/yyyy",
      bs: "d.m.yyyy",
      bs_BA: "d.m.yyyy",
      bs_Cyrl_BA: "d.m.yyyy",
      bs_Latn_BA: "d.m.yyyy",
      ca: "dd/mm/yyyy",
      ca_ES: "dd/mm/yyyy",
      ca_ES_EURO: "dd/mm/yyyy",
      co_FR: "dd/mm/yyyy",
      cs: "d.m.yyyy",
      cs_CZ: "d.m.yyyy",
      cy: "dd/mm/yyyy",
      cy_GB: "dd/mm/yyyy",
      "cy_GB]": "dd/mm/yyyy",
      da: "dd-mm-yyyy",
      da_DK: "dd-mm-yyyy",
      de: "dd.mm.yyyy",
      de_AT: "dd.mm.yyyy",
      de_AT_EURO: "dd.mm.yyyy",
      de_CH: "dd.mm.yyyy",
      de_DE: "dd.mm.yyyy",
      de_DE_EURO: "dd.mm.yyyy",
      de_LI: "dd.mm.yyyy",
      de_LU: "dd.mm.yyyy",
      de_LU_EURO: "dd.mm.yyyy",
      dsb_DE: "d. m. yyyy",
      dv_mV: "dd/mm/yy",
      el: "d/m/yyyy",
      el_GR: "d/m/yyyy",
      en_029: "mm/dd/yyyy",
      en_AU: "d/mm/yyyy",
      en_BB: "m/d/yyyy",
      en_BM: "m/d/yyyy",
      en_BZ: "dd/mm/yyyy",
      en_CA: "dd/mm/yyyy",
      en_GB: "dd/mm/yyyy",
      en_GH: "m/d/yyyy",
      en_ID: "m/d/yyyy",
      en_IE: "dd/mm/yyyy",
      en_IE_EURO: "m/d/yyyy",
      en_IN: "dd-mm-yyyy",
      en_Jm: "dd/mm/yyyy",
      en_mY: "d/m/yyyy",
      en_NG: "m/d/yyyy",
      en_NZ: "d/mm/yyyy",
      en_PH: "m/d/yyyy",
      en_PK: "m/d/yyyy",
      en_SG: "d/m/yyyy",
      en_TT: "dd/mm/yyyy",
      en_US: "m/d/yyyy",
      en_ZA: "yyyy/mm/dd",
      en_ZW: "m/d/yyyy",
      es: "dd/mm/yyyy",
      es_AR: "dd/mm/yyyy",
      es_BO: "dd/mm/yyyy",
      es_CL: "dd-mm-yyyy",
      es_CO: "dd/mm/yyyy",
      es_CR: "dd/mm/yyyy",
      es_DO: "dd/mm/yyyy",
      es_EC: "dd/mm/yyyy",
      es_ES: "dd/mm/yyyy",
      es_ES_EURO: "dd/mm/yyyy",
      es_GT: "dd/mm/yyyy",
      es_HN: "dd/mm/yyyy",
      es_mX: "dd/mm/yyyy",
      es_NI: "dd/mm/yyyy",
      es_PA: "mm/dd/yyyy",
      es_PE: "dd/mm/yyyy",
      es_PR: "dd/mm/yyyy",
      es_PY: "dd/mm/yyyy",
      es_SV: "dd/mm/yyyy",
      es_US: "m/d/yyyy",
      es_UY: "dd/mm/yyyy",
      es_VE: "dd/mm/yyyy",
      et: "d.mm.yyyy",
      et_EE: "d.mm.yyyy",
      eu: "yyyy/mm/dd",
      eu_ES: "yyyy/mm/dd",
      fa_IR: "mm/dd/yyyy",
      fi: "d.m.yyyy",
      fi_FI: "d.m.yyyy",
      fi_FI_EURO: "d.m.yyyy",
      fil_PH: "m/d/yyyy",
      fo_FO: "dd-mm-yyyy",
      fr: "dd/mm/yyyy",
      fr_BE: "d/mm/yyyy",
      fr_CA: "yyyy-mm-dd",
      fr_CH: "dd.mm.yyyy",
      fr_FR: "dd/mm/yyyy",
      fr_FR_EURO: "dd/mm/yyyy",
      fr_LU: "dd/mm/yyyy",
      fr_mC: "dd/mm/yyyy",
      fy_NL: "d-m-yyyy",
      ga: "dd/mm/yyyy",
      ga_IE: "dd/mm/yyyy",
      gd_GB: "dd/mm/yyyy",
      gl_ES: "dd/mm/yy",
      gsw_FR: "dd/mm/yyyy",
      gu_IN: "dd-mm-yy",
      ha_Latn_NG: "d/m/yyyy",
      he_IL: "dd/mm/yyyy",
      hi: "dd-mm-yyyy",
      hi_IN: "dd-mm-yyyy",
      hr: "d.m.yyyy",
      hr_BA: "d.m.yyyy.",
      hr_HR: "d.m.yyyy",
      hsb_DE: "d. m. yyyy",
      hu: "yyyy. mm. dd.",
      hu_HU: "yyyy. mm. dd.",
      hy: "dd.mm.yyyy",
      hy_Am: "dd.mm.yyyy",
      id_ID: "dd/mm/yyyy",
      ig_NG: "d/m/yyyy",
      ii_CN: "yyyy/m/d",
      "in": "dd/mm/yyyy",
      in_ID: "dd/mm/yyyy",
      is: "d.m.yyyy",
      is_IS: "d.m.yyyy",
      it: "dd/mm/yyyy",
      it_CH: "dd.mm.yyyy",
      it_IT: "dd/mm/yyyy",
      iu_Cans_CA: "d/m/yyyy",
      iu_Latn_CA: "d/mm/yyyy",
      iw: "dd/mm/yyyy",
      iw_IL: "dd/mm/yyyy",
      ja: "yyyy/mm/dd",
      ja_JP: "yyyy/mm/dd",
      ka: "dd.mm.yyyy",
      ka_GE: "dd.mm.yyyy",
      kk_KZ: "dd.mm.yyyy",
      kl_GL: "dd-mm-yyyy",
      km_KH: "yyyy-mm-dd",
      kn_IN: "dd-mm-yy",
      ko: "yyyy-mm-dd",
      ko_KR: "yyyy-mm-dd",
      kok_IN: "dd-mm-yyyy",
      ky_KG: "dd.mm.yy",
      lb: "dd/mm/yyyy",
      lb_LU: "dd/mm/yyyy",
      lo_LA: "dd/mm/yyyy",
      lt: "yyyy.mm.dd",
      lt_LT: "yyyy.mm.dd",
      lv: "yyyy.mm.dd.",
      lv_LV: "yyyy.mm.dd.",
      mi_NZ: "dd/mm/yyyy",
      mk: "dd.mm.yyyy",
      mk_mK: "dd.mm.yyyy",
      ml_IN: "dd-mm-yy",
      mn_mN: "yy.mm.dd",
      mn_mong_CN: "yyyy/m/d",
      moh_CA: "m/d/yyyy",
      mr_IN: "dd-mm-yyyy",
      ms: "dd/mm/yyyy",
      ms_BN: "dd/mm/yyyy",
      ms_mY: "dd/mm/yyyy",
      mt: "dd/mm/yyyy",
      mt_mT: "dd/mm/yyyy",
      nb_NO: "dd.mm.yyyy",
      ne_NP: "m/d/yyyy",
      nl: "d-m-yyyy",
      nl_BE: "d/mm/yyyy",
      nl_NL: "d-m-yyyy",
      nl_SR: "d-m-yyyy",
      nn_NO: "dd.mm.yyyy",
      no: "dd.mm.yyyy",
      no_NO: "dd.mm.yyyy",
      nso_ZA: "yyyy/mm/dd",
      oc_FR: "dd/mm/yyyy",
      or_IN: "dd-mm-yy",
      pa_IN: "dd-mm-yy",
      pl: "yyyy-mm-dd",
      pl_PL: "yyyy-mm-dd",
      prs_AF: "dd/mm/yy",
      ps_AF: "dd/mm/yy",
      pt: "dd/mm/yyyy",
      pt_AO: "dd/mm/yyyy",
      pt_BR: "dd/mm/yyyy",
      pt_PT: "dd-mm-yyyy",
      qut_GT: "dd/mm/yyyy",
      quz_BO: "dd/mm/yyyy",
      quz_EC: "dd/mm/yyyy",
      quz_PE: "dd/mm/yyyy",
      rm: "dd/mm/yyyy",
      rm_CH: "dd/mm/yyyy",
      ro: "dd.mm.yyyy",
      ro_MD: "dd.mm.yyyy",
      ro_RO: "dd.mm.yyyy",
      ru: "dd.mm.yyyy",
      ru_RU: "dd.mm.yyyy",
      rw_RW: "m/d/yyyy",
      sa_IN: "dd-mm-yyyy",
      sah_RU: "mm.dd.yyyy",
      se_FI: "d.m.yyyy",
      se_NO: "dd.mm.yyyy",
      se_SE: "yyyy-mm-dd",
      sh: "dd.mm.yyyy",
      sh_BA: "dd.mm.yyyy",
      sh_CS: "dd.mm.yyyy",
      sh_ME: "dd.mm.yyyy",
      si_LK: "yyyy-mm-dd",
      sk: "d. m. yyyy",
      sk_SK: "d. m. yyyy",
      sl: "d.m.yyyy",
      sl_SI: "d.m.yyyy",
      sma_NO: "dd.mm.yyyy",
      sma_SE: "yyyy-mm-dd",
      smj_NO: "dd.mm.yyyy",
      smj_SE: "yyyy-mm-dd",
      smn_FI: "d.m.yyyy",
      sms_FI: "d.m.yyyy",
      sq_AL: "yyyy-mm-dd",
      sr: "d.m.yyyy",
      sr_BA: "d.m.yyyy",
      sr_CS: "d.m.yyyy",
      sr_Cyrl_BA: "d.m.yyyy",
      sr_Cyrl_CS: "d.m.yyyy",
      sr_Cyrl_mE: "d.m.yyyy",
      sr_Cyrl_RS: "d.m.yyyy",
      sr_Latn_BA: "d.m.yyyy",
      sr_Latn_CS: "d.m.yyyy",
      sr_Latn_mE: "d.m.yyyy",
      sr_Latn_RS: "d.m.yyyy",
      sv: "yyyy-mm-dd",
      sv_FI: "d.m.yyyy",
      sv_SE: "yyyy-mm-dd",
      sw_KE: "m/d/yyyy",
      syr_SY: "dd/mm/yyyy",
      ta_IN: "dd-mm-yyyy",
      te_IN: "dd-mm-yy",
      tg_Cyrl_TJ: "dd.mm.yy",
      tg_TJ: "dd.mm.yy",
      th: "d/m/yyyy",
      th_TH: "d/m/yyyy",
      tk_Tm: "dd.mm.yy",
      tl: "dd-mm-yyyy",
      tl_PH: "dd-mm-yyyy",
      tn_ZA: "yyyy/mm/dd",
      tr: "dd.mm.yyyy",
      tr_TR: "dd.mm.yyyy",
      tt_RU: "dd.mm.yyyy",
      tzm_Latn_DZ: "dd-mm-yyyy",
      ug_CN: "yyyy-m-d",
      uk: "dd.mm.yyyy",
      uk_UA: "dd.mm.yyyy",
      ur: "dd/mm/yyyy",
      ur_PK: "dd/mm/yyyy",
      uz_Cyrl_UZ: "dd.mm.yyyy",
      uz_Latn_UZ: "dd/mm yyyy",
      vi: "dd/mm/yyyy",
      vi_VN: "dd/mm/yyyy",
      wo_SN: "dd/mm/yyyy",
      xh_ZA: "yyyy/mm/dd",
      yo_NG: "d/m/yyyy",
      zh: "yyyy/m/d",
      zh_CN: "yyyy/m/d",
      zh_CN_PINYIN: "yyyy/m/d",
      zh_CN_STROKE: "yyyy/m/d",
      zh_HK: "d/m/yyyy",
      zh_HK_STROKE: "yyyy/m/d",
      zh_mO: "d/m/yyyy",
      zh_SG: "d/m/yyyy",
      zh_TW: "yyyy/m/d",
      zh_TW_STROKE: "yyyy/m/d",
      zu_ZA: "yyyy/mm/dd"
  };
  var lang = currentUserLocale;
  lang = lang.replace("-", "_");
  var foundFormat;
  if (formats[lang] != null) {
      foundFormat = formats[lang]
  }
  return foundFormat || "dd/mm/yyyy"
}




function sortResults(jsArray, prop, asc) {
  jsArray = jsArray.sort(function(a, b) {
      if (asc) {
          return ((a[prop]).toLowerCase() > (b[prop]).toLowerCase()) ? 1 : (((a[prop]).toLowerCase() < (b[prop]).toLowerCase()) ? -1 : 0);
      } else {
          return ((b[prop]).toLowerCase() > (a[prop]).toLowerCase()) ? 1 : (((b[prop]).toLowerCase() < (a[prop]).toLowerCase()) ? -1 : 0);
      }
  });
  return jsArray;

}




function collapsedExpendGanttTaskTree(element){
  if($('#expandAllTasks').hasClass('rotate-180')){
      $('#expandAllTasks').removeClass('rotate-180');
      collapseAllTaskTree();
  }else{
      $('#expandAllTasks').addClass('rotate-180');
      expandAllTaskTree();
  }
}

function collapseAllTaskTree(){

  /*let taskWithChild = gantt.serialize().data.filter(task => gantt.hasChild(task.id) && task.id != ganttProjectId);
  taskWithChild.forEach(task => {
      gantt.close(task.id);
      gantt.refreshTask(task.id);
  })*/
  expandAll = false;
  let firstLevelChild = gantt.getChildren(ganttProjectId).filter(task => gantt.hasChild(task));
  firstLevelChild.forEach((task,index) => {
      let taskData = gantt.getTask(task);
      taskData.$open = false;
      taskData.open = false;
      //gantt.refreshTask(task);
      if(index == (firstLevelChild.length-1)){
          $('.gantt-operation-progress-ring').removeClass('ct-rotating');
          $('.gantt-operation-progress-ring').addClass('ct-complete');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"100 0");
          gantt.render();
      }else if(index == 0){
          $('.gantt-operation-progress-ring').removeClass('ct-complete');
          $('.gantt-operation-progress-ring').addClass('ct-rotating');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"75 25");
      }
  })
  /*gantt.eachTask(function(task){
      if(gantt.hasChild(task.id)){
          gantt.close(task.id);
          gantt.refreshTask(task.id);
      }
  },ganttProjectId);*/

  //gantt.render();
}

function expandAllTaskTree(){
  /*var startIndex1 = 0;
  gantt.eachTask(function(task){
      if(startIndex1 > 0){
          //task.$open = true;
          //task.open = true;
          gantt.open(task.id);
      }
      startIndex1 = startIndex1 + 1;

  });
  gantt.render();*/
  expandAll = true;
  //if(expandAll){
      var startIndex = 0;
      gantt.eachTask(function(task){
          if(startIndex > 0){
              task.$open = true;
              task.open = true;
          }
          startIndex = startIndex + 1;
      });
      gantt.render();
  //}else{
      /*$('.gantt-operation-progress-ring').removeClass('ct-complete');
      $('.gantt-operation-progress-ring').addClass('ct-rotating');
      $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"75 25");
      gantt.load(_restEndpoints.read_only_expand_all,function(){
          expandAll = true;
          $('.gantt-operation-progress-ring').removeClass('ct-rotating');
          $('.gantt-operation-progress-ring').addClass('ct-complete');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"100 0");

      });*/
  //loadGanttDataExpanded();
  //}
  var date_to_str = gantt.date.date_to_str(gantt.config.task_date);
  var today =new Date();
  var todayMarker = gantt.addMarker({
      start_date: today,
      css: "today",
      text: "Today",
      title: "Today: " + date_to_str(today)
  });

  gantt.getMarker(todayMarker);

}
//slds open trigger button menu
function openNewActivityMenu(e,ele) {
  e.stopPropagation();
  if($(ele).closest('.slds-dropdown-trigger').hasClass("slds-is-open")){
      $(ele).closest('.slds-dropdown-trigger').removeClass("slds-is-open");
  }else{
      $(ele).closest('.slds-dropdown-trigger').addClass("slds-is-open");
  }
}

$(window).on('click', function () {
  if ($(".slds-dropdown-trigger").hasClass("slds-is-open")) {
      $(".slds-dropdown-trigger").removeClass("slds-is-open");
  }
});

function exportGanttTasks() {
  gantt.config.smart_rendering = false;
  //Not supporting PDF and PNG export with two window layout of gantt
  gantt.config.layout = defaultGanttLayout;
  gantt.init(document.getElementById('d3'));
  gantt.render();
  gantt.exportToPDF({
      raw:true
  });
  gantt.config.smart_rendering = true;
  gantt.config.layout = gridTimelineLayout;
  gantt.init(document.getElementById('d3'));
  gantt.render();

}

function exportGanttTasksToPNG(){
  gantt.config.smart_rendering = false;
  //Not supporting PDF and PNG export with two window layout of gantt
  gantt.config.layout = defaultGanttLayout;
  gantt.init(document.getElementById('d3'));
  gantt.render();
  gantt.exportToPNG({
      raw:true
  });
  gantt.config.smart_rendering = true;
  gantt.config.layout = gridTimelineLayout;
  gantt.init(document.getElementById('d3'));
  gantt.render();
}

function exportGanttTasksToCSV(){
  gantt.config.smart_rendering = false;
  window.open(_PageURLs.printProjectTasks+'?id='+ganttProjectId,'_blank');
  gantt.config.smart_rendering = true;
}

function exportToMSProject(){
  gantt.config.smart_rendering = false;
  gantt.exportToMSProject();
  gantt.config.smart_rendering = true;
}

function expandFullScreen(element){
  if (!gantt.getState().fullscreen) {
      // expanding the gantt to full screen
      gantt.expand();
  }
  else {
      // collapsing the gantt to the normal mode
      gantt.collapse();
  }
}

function toggleSlack(toggle) {
  toggle.enabled = !toggle.enabled;
  if (toggle.enabled) {
      //toggle.innerHTML = "Hide Slack";
      //declaring custom config
      gantt.config.show_slack = true;
  } else {
      //toggle.innerHTML = "Show Slack";
      gantt.config.show_slack = false;
  }
  gantt.render();
}

function toggleGanttChart(toggle){
  if (toggle === 'grid'){
       gantt.config.layout = gridOnlyLayout;
  }else if(toggle === 'chart'){
      gantt.config.layout = chartOnlyLayout;
  }else {
       gantt.config.layout = gridTimelineLayout;
  }
  gantt.init(document.getElementById('d3'));
  gantt.render();
}
/*function toggleOverlay() {
  if(overlayControl.isOverlayVisible(lineOverlay)){
      gantt.config.readonly = false;
      overlayControl.hideOverlay(lineOverlay);
      gantt.$root.classList.remove("overlay_visible");
  }else{
      gantt.config.readonly = true;
      overlayControl.showOverlay(lineOverlay);
      gantt.$root.classList.add("overlay_visible");
  }
}*/
function getChartScaleRange(){
  var tasksRange = gantt.getSubtaskDates();
  var cells = [];
  var scale = gantt.getScale();
  if(!tasksRange.start_date){
      return scale.trace_x;
  }

  scale.trace_x.forEach(function(date){
      if(date >= tasksRange.start_date && date <= tasksRange.end_date){
          cells.push(date);
      }
  });
  return cells;
}


function getProgressLine(){
  var tasks = gantt.getTaskByTime();
  var scale = gantt.getScale();
  var step = scale.unit;


  var timegrid = {};

  var totalDuration = 0;

  gantt.eachTask(function(task){
      if(gantt.isSummaryTask(task)){
          return;
      }
      if(!task.duration){
          return;
      }

      var currDate = gantt.date[scale.unit + "_start"](new Date(task.start_date));
      while (currDate < task.end_date) {

          var date = currDate;
          currDate = gantt.date.add(currDate, 1, step);

          if (!gantt.isWorkTime({date: date, task: task, unit: step})) {
              continue;
          }

          var timestamp = currDate.valueOf();
          if (!timegrid[timestamp]){
              timegrid[timestamp] = {
                  planned: 0,
                  real: 0
              };
          }

          timegrid[timestamp].planned += 1;
          if (date <= today){
              timegrid[timestamp].real += 1 * (task.progress || 0);
          }

          totalDuration += 1;
      }

  });

  var cumulativePlannedDurations = [];
  var cumulativeRealDurations = [];
  var cumulativePredictedDurations = []
  var totalPlanned = 0;
  var totalReal = 0;

  var chartScale = getChartScaleRange();
  var dailyRealProgress = -1;
  var totalPredictedProgress = 0;
  for(var i = 0; i < chartScale.length; i++){
      start = new Date(chartScale[i]);
      end = gantt.date.add(start, 1, step);
      var cell = timegrid[start.valueOf()] || {planned:0, real:0};
      totalPlanned = cell.planned + totalPlanned;

      cumulativePlannedDurations.push(totalPlanned);
      if(start <= today) {
          totalReal = (cell.real||0) + totalReal;
          cumulativeRealDurations.push(totalReal);
          cumulativePredictedDurations.push(null);
      } else{
          if(dailyRealProgress < 0){
              dailyRealProgress = totalReal / cumulativeRealDurations.length;
              totalPredictedProgress = totalReal;
              cumulativePredictedDurations.pop();
              cumulativePredictedDurations.push(totalPredictedProgress);
          }
          totalPredictedProgress += dailyRealProgress;
          cumulativePredictedDurations.push(totalPredictedProgress);
      }
  }

  for(var i = 0; i < cumulativePlannedDurations.length; i++){
      cumulativePlannedDurations[i] = Math.round(cumulativePlannedDurations[i] / totalPlanned * 100);
      if(cumulativeRealDurations[i] !== undefined){
          cumulativeRealDurations[i] = Math.round(cumulativeRealDurations[i] / totalPlanned * 100);

      }

      if(cumulativePredictedDurations[i] !== null){
          cumulativePredictedDurations[i] = Math.round(cumulativePredictedDurations[i] / totalPlanned * 100);
      }
  }
  return {planned: cumulativePlannedDurations, real: cumulativeRealDurations, predicted: cumulativePredictedDurations};
}
function getScalePaddings(){
  var scale = gantt.getScale();
  var dataRange = gantt.getSubtaskDates();

  var chartScale = getChartScaleRange();
  var newWidth = scale.col_width;
  var padding = {
      left:0,
      right:0
  };

  if(dataRange.start_date){
      var yScaleLabelsWidth = 48;
      // fine tune values in order to align chart with the scale range
      padding.left = gantt.posFromDate(dataRange.start_date) - yScaleLabelsWidth;
      padding.right = scale.full_width - gantt.posFromDate(dataRange.end_date) - yScaleLabelsWidth;
      padding.top = gantt.config.row_height - 12;
      padding.bottom = gantt.config.row_height - 12;
  }
  return padding;
}

function initServerData(){
  console.log(_restEndpoints.read_only);


  $("#d3").height($(window).height() - $("#d3").offset().top - $(".bPageFooter:visible").height() - 60)

  initGantt();


}

function clickHeaderAddButton(){
  if(isDisableCreateTask == "false"){
      gantt.createTask();
  }
}
function clickGridButton(id, action) {
  switch (action) {
      case "edit":
          gantt.showLightbox(id);
          break;
      case "add":
          let taskData = gantt.getTask(id);
          if(isDisableCreateTask == "false"){
              var taskId = gantt.createTask(null,id);
              gantt.showTask(taskId);
          }
          break;
      case "delete":
          gantt.confirm({
              title: gantt.locale.labels.confirm_deleting_title,
              text: gantt.locale.labels.confirm_deleting,
              callback: function (res) {
                  if (res)
                      gantt.deleteTask(id);
                  }
          });
          break;
  }
}


function ganttInitialConfig(){
  gantt.templates.task_text=function(start,end,task){
      return "<b>Text:</b> "+task.text+",<b> Holders:</b> "+task.owner;
  };

  //gantt.config.sort = true;
  gantt.config.readonly = readOnlyGantt==='true'? true : false;
  gantt.config.keyboard_navigation = true;
  gantt.config.keyboard_navigation_cells = true;
  gantt.config.cascade_delete = false;
  gantt.config.auto_scheduling = true;
  gantt.config.auto_scheduling_strict = true;
  gantt.config.auto_scheduling_initial = false;

  gantt.config.smart_scales = true;

  gantt.config.schedule_from_end = false;
  var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
  //gantt.config.project_start = new Date();
  //ganttProjectStartDate

  // you can switch back to pre-6.1 auto scheduling by disabling constraints using the following line
  gantt.config.auto_scheduling_compatibility = false;

  gantt.config.row_height = 40;
  gantt.config.task_height = 16;
  gantt.config.show_errors = false;
  gantt.config.fit_tasks = true;
  gantt.config.show_unscheduled = true;
  if(isDisableCreateTask == "false"){
      gantt.config.placeholder_task = true;
  }
  if(isDisplayAssignedTasksOnly == true){
      gantt.config.placeholder_task = false;
      isDisableCreateTask = "True"
  }


  gantt.config.auto_types = true;

  gantt.config.order_branch = "marker";
  gantt.config.order_branch_free = true;

  //Project-Level Work Calendars
  gantt.config.inherit_calendar = true;

  gantt.config.xml_date = DEFAULT_SERVER_DATE_FORMAT;
  gantt.config.date_grid = DEFAULT_SERVER_DATE_FORMAT;



  //gantt.config.xml_date = GANTT_DATE_FORMAT;
  //gantt.config.date_grid = GANTT_DATE_FORMAT;

  gantt.config.work_time = true;
  //gantt.config.correct_work_time = true;
  gantt.config.scale_unit = "day";
  gantt.config.date_scale = "%D, %d";
  gantt.config.min_Humn_width = 60;
  gantt.config.duration_unit = "day";
  gantt.config.scale_height = 20 * 3;
  gantt.config.row_height = 30;

  var weekScaleTemplate = function (date) {
      var dateToStr = gantt.date.date_to_str("%d %M");
      var weekNum = gantt.date.date_to_str("(week %W)");
      var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
      return dateToStr(date) + " - " + dateToStr(endDate) + " " + weekNum(date);
  };

  gantt.config.subscales = [
      {unit: "month", step: 1, date: "%F, %Y"},
      {unit: "week", step: 1, template: weekScaleTemplate}

  ];

  // remove static background to enable weekend highlight
  /*gantt.templates.task_cell_class = function (task, date) {
      if (!gantt.isWorkTime({ date: date, task: task }))
          return "weekend";
      return "";
   };*/

  gantt.templates.scale_cell_class = function (date) {
      if (date.getDay() == 0 || date.getDay() == 6) {
          return "weekend";
      }
  };

  gantt.config.grid_width = 400;
  gantt.config.grid_resize = true;
  gantt.config.keep_grid_width = false;
  gantt.config.initial_scroll = true;

  gantt.config.multiselect = true;
  gantt.config.min_duration = 24*60*60*1000;

  gantt.config.autoscroll = true;
  gantt.config.autoscroll_speed = 50;

  gantt.config.branch_loading = true;
  gantt.config.branch_loading_property = "$has_child";
  gantt.config.static_background = true;

  gantt.attachEvent("onError", function(errorMessage){
      gantt.message({
          text:"Error: " + errorMessage
      });
      return true;
  });

  /*gantt.attachEvent("onLoadEnd", function(){
      //gantt.sort('sortorder',false,ganttProjectId,true);
      gantt.sort();
  });*/

  gantt.templates.task_class = gantt.templates.grid_row_class = gantt.templates.task_row_class = function (start, end, task) {
      if (gantt.isSelectedTask(task.id))
          return "gantt_selected";
  };

  gantt.templates.task_class = function (start, end, task) {
      switch (task.type) {
          case "task":
              return "task-color";
              break;
      }
  };


  /*gantt.attachEvent("onBeforeTaskMove", function(id, parent, tindex){
      if(tindex >= gantt.getTaskIndex(gantt.getTaskBy(task => task.type == 'placeholder')[0].id) ){
          return false;

      }
      return true
});*/

  gantt.attachEvent("onDataRender", function(){
      gantt.scrollTo(0, 0);
  });


  gantt.attachEvent("onBeforeTaskDisplay", function(id, task){
      if(task.$level !=0 && task.type != "placeholder"){

          if(taskFilter == 'All'){
              if(isDisplayAssignedTasksOnly == true){
                  if (task.isLoggedInAssignedTask == true){
                      return true;
                  }
                  return false;
              }else{
                  return true;
              }
          } else if(taskFilter == 'Completed'){
                /*if (task[namespacePrefix+"Complete__c"] == true && task[namespacePrefix+"Status__c"] == 'Completed')
                    return true;

                var child = gantt.getChildren(id);
                for (var i = 0; i < child.length; i++) {
                    let childData = gantt.getTask(child[i]);
                    if (childData[namespacePrefix+"Complete__c"] == true && childData[namespacePrefix+"Status__c"] == 'Completed')
                        return true;
                }
                return false;*/
              if(task[namespacePrefix+"Complete__c"] == true && task[namespacePrefix+"Status__c"] == 'Completed'){
                    //return true;
                  if(isDisplayAssignedTasksOnly == true){
                      if (task.isLoggedInAssignedTask == true){
                          return true;
                      }
                      return false;
                  }else{
                      return true;
                  }
              }
              return false;
          } else if(taskFilter == 'Milestone'){
                /*if (task[namespacePrefix+"Milestone__c"] == true)
                    return true;

                var child = gantt.getChildren(id);
                for (var i = 0; i < child.length; i++) {
                    let childData = gantt.getTask(child[i]);
                    if (childData[namespacePrefix+"Milestone__c"] == true)
                        return true;
                }
                return false;*/
              if (task[namespacePrefix+"Milestone__c"] == true){
                    //return true;
                  if(isDisplayAssignedTasksOnly == true){
                      if (task.isLoggedInAssignedTask == true){
                          return true;
                      }
                      return false;
                  }else{
                      return true;
                  }
              }
              return false;
          } else if(taskFilter == 'Active'){
                /*if (task[namespacePrefix+"Complete__c"] == false && task[namespacePrefix+"Status__c"] != 'Completed')
                    return true;

                var child = gantt.getChildren(id);
                for (var i = 0; i < child.length; i++) {
                    let childData = gantt.getTask(child[i]);
                    if (childData[namespacePrefix+"Complete__c"] == false && childData[namespacePrefix+"Status__c"] != 'Completed')
                        return true;
                }
                return false;*/
              if (task[namespacePrefix+"Complete__c"] == false && task[namespacePrefix+"Status__c"] != 'Completed'){
                    //return true;
                  if(isDisplayAssignedTasksOnly == true){
                      if (task.isLoggedInAssignedTask == true){
                          return true;
                      }
                      return false;
                  }else{
                      return true;
                  }
              }
              return false;
          } else if(taskFilter == 'Sprint'){
                /*if(sprintTaskFilterArray.length>0){
                    if (sprintTaskFilterArray.includes(task[namespacePrefix+"Sprint__c"]))
                        return true;

                    var child = gantt.getChildren(id);
                    for (var i = 0; i < child.length; i++) {
                        let childData = gantt.getTask(child[i]);
                        if (sprintTaskFilterArray.includes(childData[namespacePrefix+"Sprint__c"]))
                            return true;
                    }
                    return false;
                }
                return true;*/
              if(sprintTaskFilterArray.length>0){
                  if (sprintTaskFilterArray.includes(task[namespacePrefix+"Sprint__c"])){
                        //return true;
                      if(isDisplayAssignedTasksOnly == true){
                          if (task.isLoggedInAssignedTask == true){
                              return true;
                          }
                          return false;
                      }else{
                          return true;
                      }
                  }
                  return false;
              }
              if(isDisplayAssignedTasksOnly == true){
                  if (task.isLoggedInAssignedTask == true){
                      return true;
                  }
                  return false;
              }else{
                  return true;
              }
          }else if(taskFilter == 'ProjectSection'){
              if(sectionTaskFilterArray.length>0){
                  if (sectionTaskFilterArray.includes(task["currentSectionId"])){
                        //return true;
                      if(isDisplayAssignedTasksOnly == true){
                          if (task.isLoggedInAssignedTask == true){
                              return true;
                          }
                          return false;
                      }else{
                          return true;
                      }
                  }
                  return false;
              }
              if(isDisplayAssignedTasksOnly == true){
                  if (task.isLoggedInAssignedTask == true){
                      return true;
                  }
                  return false;
              }else{
                  return true;
              }
          }
     }
     return true;

  });

  function keep_placeholder_at_bottom(){
    gantt.eachTask(function(task){
      if (task.type == gantt.config.types.placeholder){
        gantt.moveTask(task.id, -1);
      }
    })
  }

  gantt.attachEvent("onAfterSort",function(field, direction, parent){
    keep_placeholder_at_bottom()
  });


  gantt.attachEvent("onRowDragStart", function(id, target, e) {
    if (gantt.getTask(id).type == gantt.config.types.placeholder) return false;
    return true;
  });

  gantt.attachEvent("onAfterTaskMove", function(id, parent, tindex){
      let movedTaskData = gantt.getTask(id);
      if(movedTaskData.parent){
          var parentTaskLinks = gantt.getTask(movedTaskData.parent).$source.concat(gantt.getTask(movedTaskData.parent).$target);
          if(parentTaskLinks!==undefined && parentTaskLinks.length>0){
              for(let i=0; i<parentTaskLinks.length; i++){
                  gantt.deleteLink(parentTaskLinks[i]);
              }
          }
      }
  });

  gantt.attachEvent("onBeforeTaskUpdate", function(id,new_item){
     let oldTaskData = gantt.getTask(id);
     if(oldTaskData.$wbs){
         new_item.oldwbs = oldTaskData.$wbs;
     }
      /* if(new_item.Krow__Constraint_Type__c == "asap" || new_item.Krow__Constraint_Type__c == "alap"){
          new_item.Krow__Task_Constraint_Date__c = null;
      } */
     new_item.oldparent = oldTaskData.parent;

      /*if(oldTaskData.type == gantt.config.types.milestone && new_item.duration > 0){
          new_item.type = gantt.config.types.task;
     }*/
  });

  gantt.attachEvent("onBeforeRowDragMove", function(id, parent, tindex){

      let oldTaskData = gantt.getTask(id);
      if(oldTaskData.$wbs){
         oldTaskData.oldwbs = oldTaskData.$wbs;
      }
      oldTaskData.oldparent = oldTaskData.parent;
      return true;
  });

  gantt.attachEvent("onTaskDrag", function(id, mode, task, original){
   var state = gantt.getState();
   var minDate = state.min_date,
       maxDate = state.max_date;

   var scaleStep=gantt.date.add(new Date(),state.scale_step,state.scale_unit)-new Date();

   var showDate,
    repaint = false;
    if(mode == "resize" || mode == "move"){
      if(Math.abs(task.start_date - minDate) < scaleStep){
        showDate = task.start_date;
        repaint = true;

      }else if(Math.abs(task.end_date - maxDate) < scaleStep){
        showDate = task.end_date;
        repaint = true;
      }

      if(repaint){
        gantt.render();
        gantt.showDate(showDate);
      }
    }
  });

  /* gantt.attachEvent("onBeforeGanttRender", function(){
     let ganttProjectData = gantt.getTask(ganttProjectId);
     var range = gantt.getSubtaskDates();
     if(range.start_date == null && ganttProjectData){
         range = {start_date:ganttProjectData.start_date,end_date:ganttProjectData.end_date};
     }
     var scaleUnit = gantt.getState().scale_unit;
     if(range.start_date && range.end_date){
         if(gantt.config.start_date && gantt.config.end_date){
             gantt.config.start_date = new Date(Math.min((gantt.date.add(range.start_date, -365, 'day')).valueOf(),gantt.config.start_date.valueOf()));
             gantt.config.end_date = new Date(Math.max((gantt.date.add(range.end_date, 365, 'day')).valueOf(),gantt.config.end_date.valueOf()));
         }else{
             gantt.config.start_date = gantt.date.add(range.start_date, -365, 'day');
             gantt.config.end_date = gantt.date.add(range.end_date, 365, 'day');
         }
     }
  });*/

  /*gantt.attachEvent("onBeforeTaskChanged", function(id, mode, originalTask){
      if(isAutoSchedulingEnabled && isTaskAutoSchedulingisEnabled){
          var modes = gantt.config.drag_mode;
          if(mode == modes.move ){
              removeLagOnSelf(id);
          }
      }
      return true;
  });*/
  gantt.eachSuccessor = function(callback, root){
        if(!this.isTaskExists(root))
          return;

        // remember tasks we've already iterated in order to avoid infinite loops
        var traversedTasks = arguments[2] || {};
        if(traversedTasks[root])
          return;
        traversedTasks[root] = true;

        var rootTask = this.getTask(root);
        var links = rootTask.$source;
        if(links){
          for(var i=0; i < links.length; i++){
            var link = this.getLink(links[i]);
            if(this.isTaskExists(link.target) && !traversedTasks[link.target]){
              callback.call(this, this.getTask(link.target));

              // iterate the whole branch, not only first-level dependencies
              this.eachSuccessor(callback, link.target, traversedTasks);
            }
          }
        }
      };

  gantt.attachEvent("onBeforeTaskDrag", function(id, mode, e){
      var modes = gantt.config.drag_mode;
      if(mode == modes.move){
          gantt.config.auto_scheduling = false;
      }
      return true;
  });

  gantt.attachEvent("onAfterTaskDrag", function(id, mode, e){
      gantt.config.auto_scheduling = true;
      if(isAutoSchedulingEnabled && isTaskAutoSchedulingisEnabled){
          var modes = gantt.config.drag_mode;
          if(mode == modes.move){
              //update lag for current task
              updateLagOnSelf(id);
              gantt.eachSuccessor(function(child){
                  gantt.autoSchedule(child.id);
                  //now update the lag after autoscheduling performed for in page update
                  //updateLagOnSuccessors(id, child.id);

              }, id);

              //update lag for current task
              //updateLagOnSelf(id);
          }
      }
  });

  var drag_id = null;
  gantt.attachEvent("onRowDragStart", function(id, target, e) {
      drag_id = id;
      return true;
  });
  gantt.attachEvent("onRowDragEnd", function(id, target) {
      drag_id = null;
      gantt.render();
  });

  /*gantt.attachEvent("onTaskOpened", function(id) {
      setTimeout(function(){
          if($('#expandAllTasks').hasClass('rotate-180')){
              let taskChild = gantt.getChildren(id);
              taskChild.forEach(childData => {
                  if(gantt.hasChild(childData)){
                      gantt.open(childData);
                  //gantt.render();
                  }
              })
          }
      },2000);
  });*/

  gantt.templates.grid_row_class = function(start, end, task){
      if(drag_id && task.id != drag_id){
          if(task.$level != gantt.getTask(drag_id).$level)
              return "cant-drop";
      }
      if ( task.$level < 1 ){
          return "parent_project"
      }
      return "";
  };


  /*
 gantt.templates.grid_row_class = function( start, end, task ) {
     if ( task.$level < 1 )
     {
         return "parent_project"
     }
     return "";
 };
  gantt.attachEvent("onBeforeExpand", function() {
      $("#ganttToolbar").css('visibility','hidden');
      $("#AppBodyHeader").css('visibility','hidden');
      $(".bPageFooter").css('visibility','hidden');
      return true;
      var el = document.querySelector(".dhx-navigation");
      el.style.position = "static";

      var chatapp = document.getElementById("chat-application");
      chatapp.style.visibility = "hidden";
  });*/

  /*gantt.attachEvent("onBeforeCollapse", function() {
      $("#ganttToolbar").css('visibility','visible');
      $("#AppBodyHeader").css('visibility','visible');
      $(".bPageFooter").css('visibility','visible');
      return true;
      var el = document.querySelector(".dhx-navigation");
      el.removeAttribute("style");

      var chatapp = document.getElementById("chat-application");
      chatapp.style.visibility = "visible";
  }); */
  //show slack configuration
  (function () {
          var totalSlackColumn = {
              name: "totalSlack",
              align: "center",
              resize: true,
              width: 70,
              label: "Total slack",
              template: function(task) {
                  if (gantt.isSummaryTask(task)) {
                      return "";
                  }
                  return gantt.getTotalSlack(task);
              }
          }

          var freeSlackColumn = {
              name: "freeSlack",
              align: "center",
              resize: true,
              width: 70,
              label: "Free slack",
              template: function(task) {
                  if (gantt.isSummaryTask(task)) {
                      return "";
                  }
                  return gantt.getFreeSlack(task);
              }
          };

          gantt.config.show_slack = false;
          gantt.addTaskLayer(function addSlack(task) {
              if (!gantt.config.show_slack) {
                  return null;
              }

              var slack = gantt.getFreeSlack(task);

              if (!slack) {
                  return null;
              }

              var state = gantt.getState().drag_mode;

              if (state == 'resize' || state == 'move') {
                  return null;
              }

              var slackStart = new Date(task.end_date);
              var slackEnd = gantt.calculateEndDate(slackStart, slack);
              var sizes = gantt.getTaskPosition(task, slackStart, slackEnd);
              var el = document.createElement('div');

              el.className = 'slack';
              el.style.left = sizes.left + 'px';
              el.style.top = sizes.top + 2 + 'px';
              el.style.width = sizes.width + 'px';
              el.style.height = sizes.height + 'px';

              return el;
          });
      })();


      gantt.addTaskLayer(function draw_planned(task_data) {
          let task = gantt.getTask(task_data.id);
          if (task[namespacePrefix+"Planned_Start_Date__c"] && task[namespacePrefix+"Planned_Due_Date__c"] &&SHOW_BASELINE) {
              var sizes = gantt.getTaskPosition(task,
                      normalizeDate(task[namespacePrefix+"Planned_Start_Date__c"]),
                      normalizeDate(task[namespacePrefix+"Planned_Due_Date__c"]));
              // console.log(sizes);
              var el = document.createElement('div');
              el.className = 'baseline';
              //el.style.left = sizes.left - 3 + 'px';
              el.style.left = sizes.left  + 'px';
              //el.style.width = sizes.width - 3 + 'px';
              el.style.width = sizes.width + 'px';
              el.style.top = sizes.top + gantt.config.task_height + 14 + 'px';
              return el;
          }
          return false;
      });

      gantt.attachEvent("onBeforeTaskAdd", function(id,task){
          //any custom logic here
          if(task.parent == 0 || gantt.getTask(task.parent).type == "placeholder"){
              task.parent = ganttProjectId;
          }
          return true;
      });


      gantt.attachEvent("onBeforeRowDragEnd", function(id, parent, tindex){
          var task = gantt.getTask(id);
          /*if(gantt.getTask(id).$index > gantt.getTaskBy(task => task.type == 'placeholder')[0].$index){
              return false;
          }else*/
          if(typeof parent == "number" || gantt.getTask(id).$wbs == 2){
              return false;
          } else if(tindex >= gantt.getTaskIndex(gantt.getTaskBy(task => task.type == 'placeholder')[0].id)){
              return false;
          }
          return true;
      });

      gantt.attachEvent("onAfterTaskAdd", function(id,task){
         let createdTaskData = gantt.getTask(id);
          //gantt.selectTask(id);
          if(createdTaskData.parent){
              var parentTaskLinks = gantt.getTask(createdTaskData.parent).$source.concat(gantt.getTask(createdTaskData.parent).$target);
              if(parentTaskLinks!==undefined && parentTaskLinks.length>0){
                  for(let i=0; i<parentTaskLinks.length; i++){
                      gantt.deleteLink(parentTaskLinks[i]);
                  }
              }
          }

      });

      gantt.attachEvent("onTaskCreated", function(task) {
          if(task.type == gantt.config.types.placeholder){
              task.text = "Create a new task";
              if(task.duration == 0){
                  task.duration = 1;
              }
              var formatFunc = gantt.date.date_to_str('%Y-%m-%d')
              let projectStartDate = formatFunc(gantt.getTaskByTime()[0].start_date);
              let currentTimeData = new Date().toLocaleTimeString('en-US', {hour12: false,
                                                                        hour: "numeric",
                                                                        minute: "numeric"});

              let dateString = projectStartDate +' '+ currentTimeData;
              var formatFuncWithTime = gantt.date.str_to_date('%Y-%m-%d %H:%i')
              // task.start_date = formatFuncWithTime(dateString);

              //task.unscheduled = false;
              //task.constraint_type = 'snet';
              //task.constraint_date = gantt.getTaskByIndex(0).start_date;
              //task.sortorder = 9999;
              /*if(gantt.getTaskCount()<2){
                  task.end_date = gantt.getTaskByIndex(0).end_date;
              }*/
              //delete task.unscheduled;
          }
          if(task.type != gantt.config.types.placeholder){
              var formatFunc = gantt.date.date_to_str(DEFAULT_SERVER_DATE_FORMAT);
              task.start_date = formatFunc(new Date());
          }
          //task.end_date = formatFunc(gantt.date.add(new Date(), 1, "day"));
          return true;
      });


}
function removeLagOnSelf(targetId){
  var tlink;
  //get all links
  var links = gantt.getLinks();
  if (links.length > 0) {
      $.each(links, function(index, link) {
          if (link.target == targetId) {
              tlink = link;
          }
      });
  }
  if(tlink){
      delete tlink.lag;
  }
}
function updateLagOnSelf(targetId){
  var tlink;
  //get all links
  var links = gantt.getLinks();
  if (links.length > 0) {
      $.each(links, function(index, link) {
          if (link.target == targetId) {
              tlink = link;
          }
      });
  }
  console.log(tlink)
  if(tlink){
      var lag = getLag(tlink);
      if(lag != undefined){
          console.log(lag);
          tlink.lag = lag;
          console.log(tlink)
          gantt.updateLink(tlink.id)
      }
  }
}


function daydifference(startDate, endDate) {
  return Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));
}

function getLag(link){

  if(link.type == gantt.config.links.finish_to_start){
      var targetTask = gantt.getTask(link.target);
      var sourceTask = gantt.getTask(link.source);
      var start_date = sourceTask.end_date;
      var end_date = targetTask.start_date;
      // Add the calculateDuration method as unable to calculate lag days on the basis of target task calendar type
      if(start_date > end_date){
          let calculatedLag = gantt.calculateDuration({
              start_date: new Date(end_date),
              end_date: new Date(start_date),
              task: gantt.getTask(link.target)
          });
          return -(calculatedLag);

      } else{
          let calculatedLag = gantt.calculateDuration({
              start_date: new Date(start_date),
              end_date: new Date(end_date),
              task: gantt.getTask(link.target)
          });
          return calculatedLag;

      }

  }
}


/*function getLag(link){
  if(link.type == gantt.config.links.finish_to_start){
      var targetTask = gantt.getTask(link.target);
      var sourceTask = gantt.getTask(link.source);

      if (targetTask.include_weekends) {
          return daydifference(new Date(sourceTask.end_date), new Date(targetTask.start_date));
      } else {
          duration = 0;
          start = new Date(sourceTask.end_date);
          end = new Date(targetTask.start_date);
          if(start < end){
              while (start < end) {
                  if ( ! WeekEndDays.includes(weekday[start.getDay()])){
                      duration++;
                  }
                  start = new Date(start.setDate(start.getDate() + 1));
              }
          } else if(start > end){
              while (start > end) {
                  if (! WeekEndDays.includes(weekday[start.getDay()])){
                      duration--;
                  }
                  start = new Date(start.setDate(start.getDate() - 1));
              }
          } else{
              duration = daydifference(start, end);
          }
          return duration;
      }
  }
}*/

function updateLagOnSuccessors(sourceId, targetId){
  var tlink;
  //get all links
  var links = gantt.getLinks();
  if (links.length > 0) {
      $.each(links, function(index, link) {
          if (link.source == sourceId && link.target == targetId) {
              tlink = link;
          }
      });
  }
  if(tlink){
      var lag = getLag(tlink);
      if(lag != undefined){
          tlink.lag = lag;
      }
  }
}
var initDHTMLXCalendar = function (id, date) {
      var obj = new dhtmlXCalendarObject(id);
      obj.setDateFormat(GANTT_DATE_FORMAT);
      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
      var formatGanttDate = gantt.date.str_to_date("%Y-%m-%d");
      if(date){
          $("#"+id).val(formatFunc(formatGanttDate(date)));
          obj.setDate(formatFunc(formatGanttDate(date)));
      }
      //obj.show();
      obj.hideTime();
      return obj;
  };


//show custom lightbox on edit



function cancelEditTask() {
  gantt.hideLightbox();
}

function removeTask() {

  gantt.confirm({
              title: gantt.locale.labels.confirm_deleting_title,
              text: gantt.locale.labels.confirm_deleting,
              callback: function (res) {
                  if (res) {
                      gantt.deleteTask(taskId);
                      gantt.hideLightbox();
                  }
              }
          });

}

function openModal(eleId) {
   $("#" + eleId + ' .slds-modal').addClass('slds-fade-in-open');
   $("#" + eleId + ' .slds-backdrop').addClass('slds-backdrop--open');
}
function closeModal(eleId) {
  $("#" + eleId + ' .slds-modal').removeClass('slds-fade-in-open');
  $("#" + eleId + ' .slds-backdrop').removeClass('slds-backdrop--open');
}

function ganttColumnConfig(){
  var textEditor = {type: "text", map_to: "text"};
  //var dateEditor = {type: "date", map_to: "start_date"};
  //var durationEditor = {type: "number", map_to: "duration", min:0, max: 100};
  //var picklistEditor = {type:"select", map_to:"priority", options:gantt.serverList("priority")};
  var predecessors = {type: "predecessor_editor", map_to: "auto"};
  gantt.attachEvent("onGanttReady", function(){
      var tooltips = gantt.ext.tooltips;
      tooltips.tooltip.setViewport(gantt.$task_data);
      if(gantt.$task_data.type == gantt.config.types.placeholder){
          $(".gantt_row").removeClass('gantt_selected');
          $(".gantt_row_placeholder").addClass('gantt_selected');
          $(".gantt_row_placeholder").attr('aria-selected',true);
          $(".gantt_row_placeholder gantt_cell[data-column-index=0]").attr('tabindex',-1);
      }

  });
  gantt.attachEvent("onBeforeLinkAdd", function(id, link) {
      var sourceTask = gantt.getTask(link.source);
      var targetTask = gantt.getTask(link.target);
      if ((sourceTask.project_phase  && targetTask.project_phase) && sourceTask.project_phase == true
              || targetTask.project_phase == true) {
          $.notify($Label.Gantt_Link_Between_Project_and_Task, {
              position : 'top left',
              style : 'bootstrap',
              className : 'info'
          });
          return false;
      } else if (sourceTask.type == 'project'
              || targetTask.type == 'project') {
          $.notify($Label.Gantt_Link_Between_Project_and_Task, {
              position : 'top left',
              style : 'bootstrap',
              className : 'info'
          });
          return false;
      }
      if (sourceTask.task_project != targetTask.task_project) {
          $.notify($Label.Gantt_Link_Between_Different_Project_Task,
                  {
                      position : 'top left',
                      style : 'bootstrap',
                      className : 'info'
                  });
          return false;
      }
  });
  gantt.attachEvent("onAfterLinkAdd", function(id, link) {
      if(isCircularLink == true){
          gantt.deleteLink(link.id);
      }
      isCircularLink = false;
  });
  gantt.attachEvent("onCircularLinkError",function(link, group){
      $.notify("Circular reference detected, autoscheduling is not possible.", {position : 'top left', style : 'bootstrap', className : 'error' });
      if(link.id !== undefined && gantt.getLink(link.id)!= undefined){
          gantt.deleteLink(link.id);
      }
      isCircularLink = true;
  });
  //'<div class="gantt_grid_head_cell gantt_grid_head_add" onclick="gantt.createTask()"></div>'


      var colHeader = `<div class="gantt_grid_head_cell gantt_grid_add" onclick="clickHeaderAddButton();" style="padding-top:20px;padding-left:30px;">
                      <svg class="slds-icon--x-small" aria-hidden="true" >
                          <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}"></use>
                      </svg>
                   </div>`,

      colContent = function (task) {
          /*return ('<i class="fa gantt_button_grid gantt_grid_edit fa-pencil" onclick="clickGridButton(\'' + task.id + '\', \'edit\')"></i>' +
                  '<i class="fa gantt_button_grid gantt_grid_add fa-plus" onclick="clickGridButton(\'' + task.id + '\', \'add\')"></i>');*/
                  if(isDisplayAssignedTasksOnly == true){
                      if(readOnlyGantt == 'false'){
                          return (`<span>&nbsp;</span><svg class="slds-button__icon gantt_button_grid gantt_grid_edit" aria-hidden="true" onclick="clickGridButton('${task.id}', 'edit')" >
                                      <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                  </svg>`);
                       };
                  };
                  if(readOnlyGantt == 'false'){
                      return (`<svg class="slds-button__icon gantt_button_grid gantt_grid_edit" aria-hidden="true" onclick="clickGridButton('${task.id}', 'edit')" >
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                          </svg>
                          <svg class="slds-button__icon gantt_button_grid gantt_grid_add" aria-hidden="true" onclick="clickGridButton('${task.id}', 'add')" >
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}"></use>
                          </svg>`);
                  };
                  if(readOnlyGantt == 'true'){
                      return '';
                  };

      };
      if(isDisplayAssignedTasksOnly == true || readOnlyGantt == 'true'){
          colHeader = ``;
      }

  gantt.serverList("status", taskStatusOptions);
  gantt.serverList("task_constraint", taskConstraintTypeOptions);

  gantt.serverList("calendar_type",[
      {key:'global',label:'Workweek'},
      {key:'custom',label:'Fullweek'}
  ] );
  gantt.serverList("boolean",[
      {key:'true',label:'true'},
      {key:'false',label:'false'}
  ] );
  gantt.addCalendar({
      id:"custom",
      worktime: {
          hours: [8, 17],
          days: [1, 1, 1, 1, 1, 1, 1]
      }
  });


  function endPopup(){
      modal = null;
      editLinkId = null;
  }
  function cancelEditLink(){
      endPopup()
  }

  function deleteLink(){
      gantt.deleteLink(editLinkId);
      endPopup()
  }

  function saveLink(){
      var link = gantt.getLink(editLinkId);

      var lagValue = modal.querySelector(".lag-input").value;
      if(!isNaN(parseInt(lagValue, 10))){
          link.lag = parseInt(lagValue, 10);
      }

      gantt.updateLink(link.id);
      if(gantt.autoSchedule){
          gantt.autoSchedule(link.source);
      }
      endPopup();
  }

  var modal;
  var editLinkId;
  gantt.attachEvent("onLinkDblClick", function(id,e){
      editLinkId = id;
      var link = gantt.getLink(id);
      var linkTitle;
      switch(link.type){
          case gantt.config.links.finish_to_start:
              linkTitle = "Finish to Start";
              break;
          case gantt.config.links.finish_to_finish:
              linkTitle = "Finish to Finish";
              break;
          case gantt.config.links.start_to_start:
              linkTitle = "Start to Start";
              break;
          case gantt.config.links.start_to_finish:
              linkTitle = "Start to Finish";
              break;
      }

      linkTitle += " " + gantt.getTask(link.source).text + " >>>> " + gantt.getTask(link.target).text;

      modal = gantt.modalbox({
          title: linkTitle,
          text: "<div>" +
                  "<label>Lag <input type='number' class='lag-input' /></label>" +
              "</div>",
          buttons: [
              {label:"Delete", css:"link-delete-btn", value:"delete"},
              {label:"Cancel", css:"link-cancel-btn", value:"cancel"},
              {label:"Save", css:"link-save-btn", value:"save"}
          ],
          width: "420px",
          type: "gantt-lag-popup",
          callback: function(result){
              switch(result){
                  case "save":
                      saveLink();
                      break;
                  case "cancel":
                      cancelEditLink();
                      break;
                  case "delete":
                      deleteLink();
                      break;
              }
          }
      });

      modal.querySelector(".lag-input").value = link.lag || 0;

      //any custom logic here
      return false;
  });


  // if(loadAllProjects){
  // 	$('#filterByProjectSections').hide();
  //     $("#import-menu").css('display', 'inline-block');
  //     /*var textFilter = "<div class='searchEl'>All Projects <input data-text-filter id='search' type='text' placeholder='Search projects...' oninput='gantt.$doFilter(this.value)'></div>";*/
  //
  //     gantt.config.columns = [
  //         {name : "text", label:"Project Name" ,width : 200,tree : true, resize : true},
  //
  //         {name : "start_date",label : "Start Date",width : 100,align : "center",resize : true, editor: {type: "start_date_editor", map_to: "start_date"},
  //              template: function(task){
  //                 var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
  //                 var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
  //                 if(typeof task.start_date == 'string'){
  //                     task.start_date = formatGanttDate(task.start_date);
  //                 }
  //                 return date = formatFunc(task.start_date);
  //              }
  //         },
  //         {name : "end_date",label : "Due Date",width : 100,align : "center",resize : true, editor: {type: "end_date_editor", map_to: "end_date"},
  //              template: function(task){
  //                      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
  //                      var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
  //                      if(typeof task.end_date == 'string'){
  //                         task.end_date = formatGanttDate(task.end_date);
  //                      }
  //                      /*if(task.start_date > task.end_date){
  //                          task.end_date = gantt.date.add(task.start_date,1,'day');
  //                      }*/
  //                      let date = new Date(task.end_date.valueOf());
  //
  //                      return formatFunc(date);
  //                  }
  //         },
  //         {name : "duration",label : "Duration",width : 80,align : "center",resize : true,hide:(gantt_columns['duration'] !== undefined ? false : true), editor: {type: "number", map_to: "duration", min:0, max: 10000}},
  //         {name : "calendar_id",label : "Calendar Type",width : 85,align : "center",resize : true,hide:(gantt_columns['calendar_id'] !== undefined ? false : true) ,editor:{type:"select", map_to:"calendar_id",options:gantt.serverList("calendar_type")},
  //             template: function (task) {
  //                 return gantt.getTaskCalendar(task).id == "custom" ? "Fullweek" : "Workweek";
  //              }
  //         },
  //         {name : "status",label : "Status",width : 80,align : "center",resize : true,hide:(gantt_columns['status'] !== undefined ? false : true) ,editor:{type:"select", map_to:"status",options:gantt.serverList("status")},
  //          template: function (task) {
  //                return (task.status!=null&&task.status!=undefined)?task.status:'';
  //             }
  //         },
  //         {name : "progress",label : "% Complete",width : 60,align : "center",resize : true,hide:(gantt_columns['progress'] !== undefined ? false : true),editor:{type:"text", map_to:"progress"},
  //          template: function (task) {
  //                 if(task.progress>1){
  //                     return task.progress;
  //                 }else if(task.progress<=1){
  //                     return (task.progress*100).toFixed(0);
  //                 }
  //                 return task.progress;
  //             }
  //         },
  //     ];
  //
  //     setScaleConfig(3);
  // }else{
      gantt.config.columns = [
          {name: "buttons",label: colHeader,width: 75,align: "center",template: colContent},
          {name : "wbs",label : "WBS",width : 80,resize : true,hide:(gantt_columns['wbs'] !== undefined ? false : true), template: function(task) {
              var wbs = gantt.getWBSCode(task);
              if(wbs){
                  value = wbs.substr(2,wbs.length)
              }
              return value;
          }},
          {name : "text",label : "Task name",width : 200,tree : true, resize : true,editor: textEditor},

          {name : "start_date",label : "Start Date",width : 100,align : "center",resize : true, editor: {type: "start_date_editor", map_to: "start_date"},
               template: function(task){
                      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                      var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
                      if(typeof task.start_date == 'string'){
                          task.start_date = formatGanttDate(task.start_date);
                      }
                      return date = formatFunc(task.start_date);
               }
          },
          {name : "end_date",label : "Due Date",width : 100,align : "center",resize : true, editor: {type: "end_date_editor", map_to: "end_date"},
               template: function(task){
                   //var formatFunc = gantt.date.date_to_str("%m/%d/%Y");
                   var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                   var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
                   if(typeof task.end_date == 'string'){
                      task.end_date = formatGanttDate(task.end_date);
                   }
                   let date = new Date(task.end_date.valueOf() - 1);
                   // let date = gantt.date.add(task.end_date, -1, 'day');
                   if(date < task.start_date){
                       return formatFunc(task.start_date)
                   }
                   return formatFunc(date);
              }
          },
          {name : "duration",label : "Duration",width : 80,align : "center",resize : true,hide:(gantt_columns['duration'] !== undefined ? false : true), editor: {type: "duration_editor", map_to: "duration", min:0, max: 10000}},
          {name : "calendar_id",label : "Calendar Type",width : 85,align : "center",resize : true,hide:(gantt_columns['calendar_id'] !== undefined ? false : true) ,editor:{type:"select", map_to:"calendar_id",options:gantt.serverList("calendar_type")},
              template: function (task) {
                  return gantt.getTaskCalendar(task).id == "custom" ? "Fullweek" : "Workweek";
               }
          },
          {name: "predecessors", label: "Predecessors",width:85, align: "left",resize: true,hide:(gantt_columns['predecessors'] !== undefined ? false : true),editor: predecessors, template: function(task){
              var links = task.$target;
              var labels = [];
              for(var i = 0; i < links.length; i++){
                  var link = gantt.getLink(links[i]);
                  var pred = gantt.getTask(link.source);
                  if(pred !== undefined){
                      labels.push(pred.text);
                  }
              }
              if(labels.length > 0){
                  return labels.join(", ")
              }else{
                  return '';
              }
          }},
          {name : "constraint_type",label : "Constraint Type",width : 80,align : "center",resize : true,hide:(gantt_columns['constraint_type'] !== undefined ? false : true) ,editor: {type: "constraintType_Editor", map_to: "constraint_type"},
              template: function (task) {
                  return gantt.locale.labels[gantt.getConstraintType(task)];
              }
          },
          {name: "constraint_date",label : "Constraint Date",width: 80, align: "center", resize : true, hide:(gantt_columns['constraint_date'] !== undefined ? false : true),
              template: function (task) {
                  var constraintTypes = gantt.config.constraint_types;
                  var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                  if (task.constraint_date && typeof task.constraint_date == 'string' && task.constraint_type != constraintTypes.ASAP && task.constraint_type != constraintTypes.ALAP) {
                      var formatToGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
                      return formatFunc(formatToGanttDate(task.constraint_date));
                  } else if(typeof task.constraint_date == 'object' && task.constraint_date != null && task.constraint_type != constraintTypes.ASAP && task.constraint_type != constraintTypes.ALAP) {
                      if(task.constraint_type == constraintTypes.FNET || task.constraint_type == constraintTypes.FNLT) {
                        //  task.constraint_date = new Date(task.constraint_date.valueOf() - 1);
                          return formatFunc(task.constraint_date);
                      }else{
                          return formatFunc(task.constraint_date);
                      }
                  }
                  return "";
              }, resize: true, editor: { type: "constraint_date_editor", map_to: "constraint_date"}
          },
          {name : "status",label : "Status",width : 50,align : "center",resize : true,hide:(gantt_columns['status'] !== undefined ? false : true) ,editor:{type:"select", map_to:"status",options:gantt.serverList("status")},
           template: function (task) {
                 return (task.status!=null&&task.status!=undefined)?task.status:'';
              }
          },
          {name : "progress",label : "% Complete",width : 60,align : "center",resize : true,hide:(gantt_columns['progress'] !== undefined ? false : true),editor:{type:"progress_editor", map_to:"progress"},
           template: function (task) {
                  if(task.progress>1){
                      return task.progress;
                  }else if(task.progress<=1){
                      return (task.progress*100).toFixed(0);
                  }
                   return task.progress;
              }
          },
      ];
      newTaskfieldsDetail = newTaskfieldsDetail.filter(task => (task.fieldApiName!="Name"&&task.fieldApiName != (namespacePrefix+"Start_Date__c") && task.fieldApiName != (namespacePrefix+"Due_Date__c") && task.fieldApiName != (namespacePrefix+"Duration__c") && task.fieldApiName != (namespacePrefix+"Include_Weekends__c") && task.fieldApiName != (namespacePrefix+"Status__c") && task.fieldApiName != (namespacePrefix+"Task_Due_Date__c") && task.fieldApiName != (namespacePrefix+"Percent_Complete__c")  && task.fieldApiName != (namespacePrefix+"Task_Start_Date__c") && task.fieldApiName != (namespacePrefix+"Constraint_Type__c") && task.fieldApiName != (namespacePrefix+"Task_Constraint_Date__c")))
      newTaskfieldsDetail.forEach(taskFieldData =>{
          let fieldObj = {name : taskFieldData.fieldApiName,label : taskFieldData.fieldLabel,width : (((taskFieldData.fieldLabel.length*8) + 20 > 150)?150:(taskFieldData.fieldLabel.length*8) + 20),align : "center",resize : true,hide:(gantt_columns[taskFieldData.fieldApiName] !== undefined ? false : true),
              template: function (task) {
                  if(taskFieldData.fieldType == "REFERENCE"){
                      return (task[taskFieldData.fieldApiName] != null && task[taskFieldData.fieldApiName] != undefined) ? task[(taskFieldData.fieldApiName+'-Name')] : '';
                  }else{
                      return (task[taskFieldData.fieldApiName]!=null&&task[taskFieldData.fieldApiName]!=undefined)?task[taskFieldData.fieldApiName]:'';
                  }
              }
          }
          if(!taskFieldData.isFormulaField){
              if(taskFieldData.fieldType == "DATE"){
                  fieldObj.editor = {type: "custom_date_editor", map_to: taskFieldData.fieldApiName};
                  fieldObj.template = function(task){
                      //var formatFunc = gantt.date.date_to_str("%m/%d/%Y");
                      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                      var formatToGanttDate = gantt.date.str_to_date("%Y-%m-%d");
                      return date = task[fieldObj.name]?formatFunc(formatToGanttDate(task[fieldObj.name])):'';
                   }
              } else if(taskFieldData.fieldType ==  "DOUBLE" || taskFieldData.fieldType == "PERCENT" || taskFieldData.fieldType == "PHONE" || taskFieldData.fieldType == "CURRENCY"){
                  fieldObj.editor = {type: "number", map_to: taskFieldData.fieldApiName, min:0}
              } else if(taskFieldData.fieldType ==  "BOOLEAN" ){
                  fieldObj.editor = {type:"select", map_to:taskFieldData.fieldApiName,options:gantt.serverList("boolean")}
              } else if(taskFieldData.fieldType ==  "PICKLIST" ){
                  let dataOption = [];
                  for(key in taskFieldData.fieldsValues){
                      if(key != "remove"){
                          dataOption.push({key:taskFieldData.fieldsValues[key],label:taskFieldData.fieldsValues[key]});
                      }
                  }
                  fieldObj.editor = {type:"select", map_to:taskFieldData.fieldApiName,options:dataOption};
              } else if(taskFieldData.fieldType == "STRING" || taskFieldData.fieldType == "ENCRYPTEDSTRING" || taskFieldData.fieldType ==  "URL"){
                  fieldObj.editor = {type: "text", map_to: taskFieldData.fieldApiName}
              }
          }
          gantt.config.columns.push(fieldObj);
      })
  // }
}

function colorConfigOfTask(){
  /*To Show project-phase in different*/
  /*gantt.config.type_renderers[gantt.config.types.project] = function(task) {
      var taskColor = task.color;
      var TASK_FILTER_TYPE = '';
      if(task.project_phase==true || task.type==="project"){
          taskColor = "#38D178";
      }
      var project_div = document.createElement("div");
      project_div.setAttribute(gantt.config.task_attribute, task.id);
      var size = gantt.getTaskPosition(task);

      //to remove green bar in case of milestone filter
      if(TASK_FILTER_TYPE == 'MilestoneTasks' && (ganttProjectId == undefined || ganttProjectId == '')){
          project_div.style.background = 'transparent';
          project_div.style.foreground = 'transparent';
      } else{
          project_div.innerHTML = [
              '<div class="phase-left" style="border-left-color:'
              + taskColor + ' !important;"></div>',
              '<div class="phase-right" style="border-right-color:'
              + taskColor + ' !important;"></div>' ].join('');
          project_div.style.background = taskColor;
      }

      project_div.className = "project-phase";
      project_div.style.left = size.left + "px";
      project_div.style.top = size.top + 7 + "px";
      project_div.style.width = size.width + "px";
      project_div.style.height ="13px";
      project_div.style.margin= "-5px";

      return project_div;
  };*/
  //var formatFunc = gantt.date.date_to_str("%m/%d/%Y");
  var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
  //var formatGanttDate = gantt.date.str_to_date("%m/%d/%Y");

  gantt.templates.tooltip_text = function (start, end, task) {
      var endDate = new Date(task.end_date.valueOf() - 1);
      if(endDate < task.start_date){
          endDate =  task.start_date
      }
      //"<br/><b>End date:</b> " + formatEndDate(task.end_date, formatFunc);
       return "<b>Task:</b> " + task.text +
          "<br/><b>Start date:</b> " + formatFunc(task.start_date) +
           "<br/><b>End date:</b> " + formatFunc(endDate);

  };

  gantt.templates.task_text=function(start, end, task){
      return "";
  };

  gantt.templates.leftside_text = function(start, end, task) {
      return "<span style='color:#A9A9A9;font-size:13px;margin-top:5px;'>"+task.text + "</span>";
  };
  gantt.templates.progress_text = function(start, end, task){
      return "<span style='color:white;text-align:left;'>"+Math.round(task.progress*100)+ "% </span>";
  };
}

function formatEndDate(date, template){
  // get 23:59:59 instead of 00:00:00 for the end date
  return template(new Date(date.valueOf() - 1));
}

function viewGanttCriticalPath(toggle) {

  gantt.config.highlight_critical_path = !gantt.config.highlight_critical_path;
  if (gantt.config.highlight_critical_path) {
      gantt.config.highlight_critical_path = true;
  } else {
      gantt.config.highlight_critical_path = false;
  }

  gantt.render();
}

function showBaseline(toggle) {
  if (!toggle.enabled) {
      SHOW_BASELINE = true;
  } else {
      SHOW_BASELINE = false;
  }
  gantt.render();
  toggle.enabled = !toggle.enabled;
}

function autoScheduleGantt() {
  gantt.autoSchedule();
  gantt.render();

}

function setGanttScaleConfig(value) {
  setScaleConfig(value);
  gantt.render();
}

function setScaleConfig(value) {
  GANTT_VIEW_SCALE = value;
  switch (value) {
      case GANTT_VIEWS["DAYS"]: {
          gantt.config.scale_unit = "month";
          gantt.config.date_scale = "%F, %Y";
          gantt.config.subscales = [ {
              unit : "day",
              step : 1,
              date : "%j, %D"
          } ];
          //gantt.config.scale_height = 50;
          gantt.templates.date_scale = null;
          /*COMMENTEDCODE-DELETED*/
          break;
      }
      case GANTT_VIEWS["WEEKS"]: {
          gantt.config.scale_unit = "month";
          gantt.config.step = 1;
          gantt.config.date_scale = "%F, %Y";
          gantt.config.min_column_width = 50;
          //gantt.config.scale_height = 50;

          gantt.date.week_start = function(date) {
              var shift = date.getDay();
              if (shift == 0) {
                  //shift = 7 - WEEK_START_DAY_INDEX;
                  shift = 7 - 1;
              } else {
                  //shift = shift - WEEK_START_DAY_INDEX;
                  shift = shift - 1;
              }

              if (shift < 0) {
                  shift = 7 + shift;
              }

              if(shift == 7){
                  return this.date_part(date);
              } else {
                  return this.date_part(this.add(date, -1 * shift, "day"));
              }
          };

          var weekScaleTemplate = function(date){
              var dateToStr = gantt.date.date_to_str("%d %M");
              var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
              return dateToStr(date) + " - " + dateToStr(endDate);
          };

          gantt.config.subscales = [
              {unit:"week", step:1, template:weekScaleTemplate}
          ];

          /*COMMENTEDCODE-DELETED*/
          break;
      }
      case GANTT_VIEWS["MONTHS"]: {
          gantt.config.scale_unit = "year";
          gantt.config.step = 1;
          gantt.config.date_scale = "%Y";
          gantt.config.min_column_width = 50;

          //gantt.config.scale_height = 50;
          gantt.templates.date_scale = null;
          gantt.config.subscales = [ {
              unit : "month",
              step : 1,
              date : "%M"
          } ];
          /*COMMENTEDCODE-DELETED*/
          break;
      }
      /*COMMENTEDCODE-DELETED*/
  }
}

function indentOutdentAction(){
  var cascadeAction = {
      "indent": true,
      "outdent": true
  };

  var actions = {
      "indent": function indent(task_id) {
          var prev_id = gantt.getPrevSibling(task_id);
          while (gantt.isSelectedTask(prev_id)) {
              var prev = gantt.getPrevSibling(prev_id);
              if (!prev) break;
              prev_id = prev;
          }
          if (prev_id) {
              var new_parent = gantt.getTask(prev_id);
              gantt.moveTask(task_id, gantt.getChildren(new_parent.id).length, new_parent.id);
              new_parent.type = gantt.config.types.project;
              new_parent.$open = true;
              gantt.updateTask(task_id);
              //gantt.updateTask(new_parent.id);
              return task_id;
          }else{
              $("#ganttToolbar").removeClass('wait-overlay');
          }
          return null;
      },
      "outdent": function outdent(task_id, initialIndexes, initialSiblings) {
          var cur_task = gantt.getTask(task_id);
          var old_parent = cur_task.parent;
          if (gantt.isTaskExists(old_parent) && old_parent !== gantt.config.root_id) {
              var index = gantt.getTaskIndex(old_parent) + 1;
              var prevSibling = initialSiblings[task_id].first;

              if(gantt.isSelectedTask(prevSibling)){
                  index += (initialIndexes[task_id] - initialIndexes[prevSibling]);
              }
              if(gantt.getParent(cur_task.parent) !=0){
                  gantt.moveTask(task_id, index, gantt.getParent(cur_task.parent));
                  if (!gantt.hasChild(old_parent))
                      gantt.getTask(old_parent).type = gantt.config.types.task;
                  gantt.updateTask(task_id);
                  gantt.updateTask(old_parent);
              }else{
                  $("#ganttToolbar").removeClass('wait-overlay');
              }
              return task_id;
          }
          return null;
      },
      //"del": function (task_id) {
          //if(gantt.isTaskExists(task_id)) gantt.deleteTask(task_id);
          //return task_id;
      //},
      // "moveForward": function (task_id) {
      //     shiftTask(task_id, 1);
      // },
      // "moveBackward": function (task_id) {
      //     shiftTask(task_id, -1);
      // }
  };
  gantt.performAction = function (actionName) {
      $("#ganttToolbar").addClass('wait-overlay');
      var action = actions[actionName];
      if (!action)
          return;


      //gantt.batchUpdate(function () {

          // need to preserve order of items on indent/outdent,
          // remember order before changing anything:
          var indexes = {};
          var siblings = {};
          gantt.eachSelectedTask(function (task_id) {
              indexes[task_id] = gantt.getTaskIndex(task_id);
              siblings[task_id] = {
                  first: null
              };

              var currentId = task_id;
              while(gantt.isTaskExists(gantt.getPrevSibling(currentId)) && gantt.isSelectedTask(gantt.getPrevSibling(currentId))){
                  currentId = gantt.getPrevSibling(currentId);
              }
              siblings[task_id].first = currentId;
          });

          var updated = {};
          gantt.eachSelectedTask(function (task_id) {

              if (cascadeAction[actionName]) {
                  if (!updated[gantt.getParent(task_id)]) {
                      var updated_id = action(task_id, indexes, siblings);

                      updated[updated_id] = true;
                  } else {
                      updated[task_id] = true;
                  }
              } else {
                  action(task_id, indexes);
              }
          });
      // });
  };

  var els = document.getElementsByClassName("action");
  for (var i = 0; i < els.length; i++) {
      $(els[i]).on('click',function(){
          gantt.performAction(this.name)
      })
  }
}

function loadAllProjectsGanttDataExpanded(){
  $("#ganttToolbar").addClass('wait-overlay');
  $('.gantt-operation-progress-ring').removeClass('ct-complete');
  $('.gantt-operation-progress-ring').addClass('ct-rotating');
  $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"75 25");
  gantt.load(_restEndpoints.read_only_all_project,function(){
      $("#ganttToolbar").removeClass('wait-overlay');
      $('.gantt-operation-progress-ring').removeClass('ct-rotating');
      $('.gantt-operation-progress-ring').addClass('ct-complete');
      $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"100 0");

  });
}

function loadProjectGanttData(){
  $("#ganttToolbar").addClass('wait-overlay');
  $('.gantt-operation-progress-ring').removeClass('ct-complete');
  $('.gantt-operation-progress-ring').addClass('ct-rotating');
  $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"75 25");
  gantt.load(_restEndpoints.read_only_expand_all,function(){
      //expandAll = true;
      /*if(!expandAll){
              collapseAllTaskTree();
          }*/
          $("#ganttToolbar").removeClass('wait-overlay');
          $('.gantt-operation-progress-ring').removeClass('ct-rotating');
          $('.gantt-operation-progress-ring').addClass('ct-complete');
          $('.gantt-operation-progress-ring-slice').attr('stroke-dasharray',"100 0");

      });


}

function normalizeDate(mydate) {
  try {
      mydate = new Date(mydate);
      mydate.getTimezoneOffset();
      var _helsenkiOffset = 2 * 60 * 60000;// maybe 3 [h*60*60000 = ms]
      var _userOffset = mydate.getTimezoneOffset() * 60000; // [min*60000 =
                                                              // ms]
      mydate = new Date(mydate.getTime() + _helsenkiOffset + _userOffset);
      return mydate;
  } catch (e) {
      return mydate;
  }
}

function ganttDateConfig(){
  var calendar_init = function (id, date) {
      var obj = new dhtmlXCalendarObject(id);
      obj.setDateFormat(GANTT_DATE_FORMAT);
      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
      $("#"+id).val(formatFunc(date));
      obj.setDate(formatFunc(date));
      //obj.show();
      obj.hideTime();
      return obj;
  };

  var other_calendar_init = function (id, date) {
      var obj = new dhtmlXCalendarObject(id);
      obj.setDateFormat(GANTT_DATE_FORMAT);
      var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
      var formatGanttDate = gantt.date.str_to_date("%Y-%m-%d");
      if(date){
          $("#"+id).val(formatFunc(formatGanttDate(date)));
          obj.setDate(formatFunc(formatGanttDate(date)));
      }
      //obj.show();
      obj.hideTime();
      return obj;
  };

  gantt.config.editor_types.start_date_editor = {
        show: function (id, column, config, placeholder) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var html = "<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar1'/></div>";
                placeholder.innerHTML = html;
            }
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            var task = gantt.getTask(id);
            /*if(task.type == 'placeholder'){
                var a = node._cal_start = calendar_init('calendar1', new Date());
                $('input[type=text]',node).click();
            }else*/
            if(task.type != "project"){
                var a = node._cal_start = calendar_init('calendar1', task.start_date);
                $('input[type=text]',node).click();
            }

            //a.show();
        },
        get_value: function (id, column, node) {
          var task = gantt.getTask(id);
            //var formatFunc = gantt.date.date_to_str(gantt.config.xml_date);
          if(task.type != "project"){
              task.start_date = node._cal_start.getDate(false);
              task.end_date = gantt.calculateEndDate(task);
          }
            //gantt.updateTask(id);
          return task.start_date;
        },
        is_changed: function (value, id, column, node) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                if(node._cal_start.getDate(true) == formatFunc(value) ){
                    return false;
                }
                return true;
            }else{
                return false;
            }
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
      }
      gantt.config.editor_types.constraint_date_editor = {
          show: function (id, column, config, placeholder) {
              let taskData = gantt.getTask(id);
              if(taskData.type != "project"){
                  var html = "<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar3'/></div>";
                  placeholder.innerHTML = html;
              }
          },
          hide: function () {
              //  gantt.render();
          },
          set_value: function (value, id, column, node) {
              var task = gantt.getTask(id);

              if(task.type != "project"){
                  var defaultDate = '';
                  if(task.constraint_date != null){
                      if(typeof task.constraint_date == "object"){
                          defaultDate = task.constraint_date;
                      }else if(typeof task.constraint_date == "string" && task.constraint_date != ""){
                          var formatGanttDate = gantt.date.str_to_date(DEFAULT_SERVER_DATE_FORMAT);
                          defaultDate = formatGanttDate(task.constraint_date);
                      }
                  }
                  if(typeof defaultDate != "object"){
                      defaultDate = task.start_date ;
                  }
                  var a = node._cal_start = calendar_init('calendar3',defaultDate);
                  $('input[type=text]',node).click();
              }

              //a.show();
          },
          get_value: function (id, column, node) {
              var task = gantt.getTask(id);
              //var formatFunc = gantt.date.date_to_str(gantt.config.xml_date);
              if(task.type != "project"){
                  task.constraint_date = node._cal_start.getDate(false);
              }
              //gantt.updateTask(id);
              return task.constraint_date;
          },
          is_changed: function (value, id, column, node) {
              let taskData = gantt.getTask(id);
              if(taskData.type != "project"){
                  var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                  if(typeof value != 'string'){
                      value = formatFunc(value)
                  }
                  if(node._cal_start.getDate(true) ==  value){
                      return false;
                  }
                  return true;
              }else{
                  return false;
              }
          },
          is_valid: function (value, id, column, node) {
              // validate, changes will be discarded if the method returns false
              return true;
          },
          save: function (id, column, node) {

          },
          focus: function (node) {
              //$('input[type=text]',node).click();
          }
      }
  gantt.config.editor_types.predecessor_editor = {
        show: function (id, column, config, placeholder) {
            var html = "<input type='text' id='predecessor'/>";
            placeholder.innerHTML = html;
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            let targetLink = value.$target;
            let values = '';
            for(let i = 0;i < targetLink.length ; i++){
                values += gantt.getTask(gantt.getLink(targetLink[i]).source).$wbs.substring(2);
                if(i != (targetLink.length-1)){
                    values += ',';
                }
            }
            $('input[type=text]',node).val(values);

        },
        get_value: function (id, column, node) {
            return $('input[type=text]',node).val().trim().split(',').filter(val => val!='');
        },
        is_changed: function (value, id, column, node) {
          return true;
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
      }

  gantt.config.editor_types.custom_date_editor = {

        show: function (id, column, config, placeholder) {
            var html = "<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar"+id+"' /></div>";
            placeholder.innerHTML = html;
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            var task = gantt.getTask(id);
            var a = node._cal_start = other_calendar_init('calendar'+id, value);
            $('input[type=text]',node).click();
            //a.show();
        },
        get_value: function (id, column, node) {
          var task = gantt.getTask(id);
          var formatFunc = gantt.date.date_to_str("%Y-%m-%d");
          var formatGanttDate = gantt.date.str_to_date(GANTT_DATE_FORMAT);
            //task[column.fieldLabel] = formatFunc(node._cal_start.getDate(false));
            task.start_date = node._cal_start.getDate(false);
            task.end_date = gantt.calculateEndDate(task);
            //gantt.updateTask(id);
          return formatFunc(node._cal_start.getDate(false));
        },
        is_changed: function (value, id, column, node) {
            var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
            var formatGanttDate = gantt.date.str_to_date("%Y-%m-%d");
            if(value){
                value = formatFunc(formatGanttDate(value));
            }
            if(node._cal_start.getDate(true) ==  value){
                return false;
            }
            return true;
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
      }
  gantt.config.editor_types.end_date_editor = {
        show: function (id, column, config, placeholder) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var html = "<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar2'/></div>";
                placeholder.innerHTML = html;
            }
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            var task = gantt.getTask(id);
            if(task.type == gantt.config.types.milestone){
                var a = node._cal_start = calendar_init('calendar2', task.end_date);
            }else{
                var a = node._cal_start = calendar_init('calendar2', new Date(task.end_date.valueOf() - 1));
            }
            //a.show();
        },
        get_value: function (id, column, node) {
          var task = gantt.getTask(id);
          //console.log('GET VALUE--;')
          //console.log(task);
          //console.log(node);
          if(task.type == gantt.config.types.milestone){
              task.type = gantt.config.types.task;
              //task.is_milestone = false;
              //task[namespacePrefix+"Milestone__c"] = false;
          }
            //var formatFunc = gantt.date.date_to_str(gantt.config.xml_date);
          task.end_date = gantt.date.add(node._cal_start.getDate(false), 1, 'day');
          task.duration = gantt.calculateDuration(task);
          if(task.duration == 1 && task[namespacePrefix+"Milestone__c"] == true){
             task.type = gantt.config.types.milestone
          }
            //gantt.updateTask(id);
          //console.log('GET VALUE--;' + task.end_date);
          return task.end_date;
        },
        is_changed: function (value, id, column, node) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
                if(node._cal_start.getDate(true) == formatFunc(gantt.date.add(value, -1, 'day'))){
                    return false;
                }
                return true;
            }else{
                return false;
            }
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
  }

  gantt.config.editor_types.progress_editor = {
        show: function (id, column, config, placeholder) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var html = "<input type='number' id='progress'/>";
                placeholder.innerHTML = html;
            }
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            //var task = gantt.getTask(id);
            $("input",node).val((value*100).toFixed(0));
            //var a = node._cal_start = calendar_init('calendar2', new Date(task.end_date.valueOf() - 1));
            //a.show();
        },
        get_value: function (id, column, node) {
          var task = gantt.getTask(id);
          task.progress = parseFloat($("input",node).val())/100;
          return task.progress;
        },
        is_changed: function (value, id, column, node) {
            //var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                if($("input",node).val() == value){
                    return false;
                }
                return true;
            }else{
                return false;
            }
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
  }


  gantt.config.editor_types.duration_editor = {
        show: function (id, column, config, placeholder) {
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                var html = "<input type='number' id='duration'/>";
                placeholder.innerHTML = html;
            }
        },
        hide: function () {
            gantt.render();
        },
        set_value: function (value, id, column, node) {
            //var task = gantt.getTask(id);
            $("input",node).val(value);
            //var a = node._cal_start = calendar_init('calendar2', new Date(task.end_date.valueOf() - 1));
            //a.show();
        },
        get_value: function (id, column, node) {
          var task = gantt.getTask(id);
          //console.log('GET VALUE--;')
          //console.log(task);
          //console.log(node);
          if(task.type == gantt.config.types.milestone){
              task.type = gantt.config.types.task;
              //task.is_milestone = false;
              //task[namespacePrefix+"Milestone__c"] = false;
          }
          task.duration = $("input",node).val();
          if(task.duration == 1 && task[namespacePrefix+"Milestone__c"] == true){
             task.type = gantt.config.types.milestone
          }
          task.end_date = gantt.calculateEndDate(task)
            //gantt.updateTask(id);
      //console.log('GET VALUE--;' + task.end_date);
          return task.duration;
        },
        is_changed: function (value, id, column, node) {
            //var formatFunc = gantt.date.date_to_str(GANTT_DATE_FORMAT);
            let taskData = gantt.getTask(id);
            if(taskData.type != "project"){
                if($("input",node).val() == value){
                    return false;
                }
                return true;
            }else{
                return false;
            }
        },
        is_valid: function (value, id, column, node) {
          // validate, changes will be discarded if the method returns false
          return true;
        },
        save: function (id, column, node) {

        },
        focus: function (node) {
            //$('input[type=text]',node).click();
        }
  }

var constraint_types = [
  { key: "asap", label: gantt.locale.labels.asap },
  { key: "alap", label: gantt.locale.labels.alap },
  { key: "snet", label: gantt.locale.labels.snet },
  { key: "snlt", label: gantt.locale.labels.snlt },
  { key: "fnet", label: gantt.locale.labels.fnet },
  { key: "fnlt", label: gantt.locale.labels.fnlt },
  { key: "mso", label: gantt.locale.labels.mso },
  { key: "mfo", label: gantt.locale.labels.mfo }
];

gantt.config.editor_types.constraintType_Editor = {
      show: function (id, column, config, placeholder) {
          let taskData = gantt.getTask(id);
          if(taskData.type != "project"){
              var drop_down_values = [];
              for (var i = 0; i < constraint_types.length; i++) {
                  drop_down_values.push("<option value="+constraint_types[i].key+">"+constraint_types[i].label+"</option>")
              };
              var html = "<select>"+drop_down_values+"</select>";
              placeholder.innerHTML = html;
          }
      },
      hide: function () {
          gantt.render();
      },
      set_value: function (value, id, column, node) {
          let taskData = gantt.getTask(id);
          $("select",node).val(value);

          if(taskData.type != "project"){
              taskData.constraint_type = value;
              taskData[namespacePrefix+"Constraint_Type__c"] = value;
          }
      },
      get_value: function (id, column, node) {
          var task = gantt.getTask(id);

          task.constraint_type = $("select option:selected",node).val()
          task[namespacePrefix+"Constraint_Type__c"] = $("select option:selected",node).val()
          /*if(task.constraint_type == "asap" || task.constraint_type == "alap"){
              task.constraint_date = null;
              task[namespacePrefix+"Task_Constraint_Date__c"] = null;
          } else if(task.constraint_type != "" && task.constraint_date == null ){
              task.constraint_date = task.start_date;
              task[namespacePrefix+"Task_Constraint_Date__c"] =  task.start_date ;
          }*/
          return task.constraint_type;
      },
      is_changed: function (value, id, column, node) {
          let taskData = gantt.getTask(id);
          if(taskData.type != "project"){
              return true;
          }
          return false;
      },
      is_valid: function (value, id, column, node) {
          return true;
      },
      save: function (id, column, node) {

      },
      focus: function (node) {

      }
}

}

/*gantt.attachEvent("onBeforeDataRender", function(){
  gantt.eachTask(function(task){
      delete task.type;
  })
});
gantt.attachEvent("onDataRender", function(){
  gantt.eachTask(function(task){
      if(task.$has_child == true){
          task.type = 'project';
      }
  })
});*/


function initGantt(){

 ganttInitialConfig();

 ganttDateConfig();

 ganttColumnConfig();

 ganttLightboxConfig();

 colorConfigOfTask();
  gantt.config.layout = gridTimelineLayout;

  gantt.ext.inlineEditors.attachEvent("onSave", function(state){
      var col = state.columnName;
  //console.log('state>>>>>>' + state);
  //console.log(state);

      if(gantt.autoSchedule && (col == "start_date" || col == "end_date" || col == "duration")){
          //gantt.autoSchedule();
          let task = gantt.getTask(state.id);
          task.constraint_type = task[namespacePrefix+"Constraint_Type__c"];
          task.constraint_date = gantt.date.parseDate(task[namespacePrefix+"Task_Constraint_Date__c"],DEFAULT_SERVER_DATE_FORMAT);
          gantt.updateTask(state.id)
          forganttautoSchule();
      }
      if(col == 'constraint_type'){
          let task = gantt.getTask(state.id);
          task.constraint_type = state.newValue;
          if(task[namespacePrefix+"Task_Constraint_Date__c"] == "" || task[namespacePrefix+"Task_Constraint_Date__c"] == undefined){
              if(task.constraint_type == 'snet' || task.constraint_type == 'snlt' || task.constraint_type == 'mso'){
                  task.constraint_date = task.start_date;
                  task[namespacePrefix+"Task_Constraint_Date__c"] = task.start_date;
              }else if(task.constraint_type == 'fnet' || task.constraint_type == 'fnlt' || task.constraint_type == 'mfo'){
                  task[namespacePrefix+"Task_Constraint_Date__c"] =  task.end_date;
                  task.constraint_date = task.end_date;
              }
          }else{
              task.constraint_date = gantt.date.parseDate(task[namespacePrefix+"Task_Constraint_Date__c"],DEFAULT_SERVER_DATE_FORMAT);
          }
          gantt.updateTask(state.id) ;
          forganttautoSchule();
      }
      if(col == 'constraint_date'){
          let task = gantt.getTask(state.id);
          //let ischanges = task.constraint_date != state.newValue ? ture : false;
          task.constraint_date = state.newValue;
          task[namespacePrefix+"Task_Constraint_Date__c"] = task.constraint_date;
          gantt.updateTask(state.id)
          forganttautoSchule();
      }

      if (col == "predecessors") {
          try{
              //var links = state.newValue.split(',');
              var links = state.newValue;
              let deleteLinkId = state.oldValue.$target.filter(linkId => (state.newValue.indexOf(gantt.getTask(gantt.getLink(linkId).source).$wbs.substring(2))<0) );
              for(var key = 0 ; key < deleteLinkId.length ; key++){
                  gantt.deleteLink(deleteLinkId[key]);
              }
              //links = links.map(link => '1.'+link);
              //var all_links = gantt.getLinks();
              //var last_link_id = 0;
              for(var i = 0; i < links.length; i++){
                  /*if (all_links.length){
                      last_link_id = all_links[all_links.length - 1].id;
                  }*/
                  var randomId = new Date().getTime();
                  if(gantt.getTaskByWBSCode('1.'+links[i])) {
                      sourceTaskId =  gantt.getTaskByWBSCode('1.'+links[i]).id;
                      var link = gantt.serialize().links , flag = false;
                      for(var j=0;j<link.length; j++){
                          if ((link[j].source == sourceTaskId) && (link[j].target == state.id) ) {
                              flag = true;
                              break;
                          }
                      };
                      if(!flag){
                          gantt.addLink({id:randomId,source:sourceTaskId,target:state.id,type:0});
                      }
                  } else{
                      $.notify('Unable to find task with WBS code'+links[i], {
                          position : 'top left',
                          style : 'bootstrap',
                          className : 'error'
                      });
                  }

              }
              gantt.updateTask(state.id)
              gantt.render();
          }catch(e){console.log(e);}
      }
  });

  async function forganttautoSchule(){
      await sleep(3000);
      gantt.autoSchedule();
  }

  function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
  }

  indentOutdentAction();
  showHideColumns();
  lineOverlay = overlayControl.addOverlay(function(container) {

      var scaleLabels = [];

      var chartScale = getChartScaleRange();

      chartScale.forEach(function(date){
          scaleLabels.push(dateToStr(date));
      });

      var values = getProgressLine();

      var canvas = document.createElement("canvas");
      container.appendChild(canvas);
      canvas.style.height = container.offsetHeight + "px";
      canvas.style.width = container.offsetWidth + "px";

      var ctx = canvas.getContext("2d");
      var myChart = new Chart(ctx, {
          type: "line",
          data: {
              datasets: [
                  {
                      label: "Planned progress",
                      backgroundColor: "#001eff",
                      borderColor: "#001eff",
                      data: values.planned,
                      fill: false,
                      cubicInterpolationMode: 'monotone'
                  },
                  {
                      label: "Real progress",
                      backgroundColor: "#ff5454",
                      borderColor: "#ff5454",
                      data: values.real,
                      fill: false,
                      cubicInterpolationMode: 'monotone'
                  }
                  ,
                  {
                      label: "Real progress (predicted)",
                      backgroundColor: "#ff5454",
                      borderColor: "#ff5454",
                      data: values.predicted,
                      borderDash: [5, 10],
                      fill: false,
                      cubicInterpolationMode: 'monotone'
                  }
              ]
          },
          options: {
              layout: {
                  padding: getScalePaddings()
              },
              onResize: function(chart, newSize) {
                  var dataRange = gantt.getSubtaskDates();
                  if(dataRange.start_date){
                      // align chart with the scale range
                      chart.options.layout.padding = getScalePaddings();
                  }
                  canvas.style.height = canvas.parentNode.offsetHeight + "px";
                  canvas.style.width = canvas.parentNode.offsetWidth + "px";
                  chart.update();
              },
              legend: {
                  display: false
              },
              tooltips: {
                  mode: "index",
                  intersect: false,
                  callbacks: {
                      label: function(tooltipItem, data) {
                          var dataset = data.datasets[tooltipItem.datasetIndex];
                          return dataset.label + ": " + dataset.data[tooltipItem.index] + "%";
                      }
                  }
              },
              hover: {
                  mode: "nearest",
                  intersect: true
              },
              scales: {
                  xAxes: [{
                      labels: scaleLabels,
                      gridLines:{
                          display: false
                      },
                      ticks: {
                          display: false
                      }
                  },
                  {
                      position:"top",
                      labels: scaleLabels,
                      gridLines:{
                          display: false
                      },
                      ticks: {
                          display: false
                      }
                  }
              ],
                  yAxes: [{
                      display: true,
                      gridLines: {
                          display:false
                      },
                      ticks: {
                          display: true,
                          min: 0,
                          max: 100,
                          stepSize: 10,
                          callback: function(current) {
                              if (current > 100) {return "";}
                              return current + "%";
                          }
                      }
                  },
                  {
                      display: true,
                      position: "right",
                      gridLines: {
                          display:false
                      },
                      ticks: {
                          display: true,
                          min: 0,
                          max: 100,
                          stepSize: 10,
                          callback: function(current) {
                              if (current > 100) {return "";}
                              return current + "%";
                          }
                      }}
              ]
              }
          }
      });
      return canvas;
  });

  gantt.init(document.getElementById('d3'));

  if(loadAllProjects){
      loadAllProjectsGanttDataExpanded();
  }else{
      loadProjectGanttData();
      var dp = gantt.createDataProcessor(function(entity, action, data, id){
          if(('task' == entity && id.toString().indexOf(ganttProjectId)==-1) || 'link' == entity){
              if('task' == entity && (action == 'create' || action == 'update')){
                  var ganttTask = gantt.getTask(data.id);

                  data.Name = data.text;
                  data[namespacePrefix+"Status__c"] = data.status;
                  gantt.selectTask(gantt.getTaskByIndex(gantt.getTaskCount()-1))

                  if(data.parent !== undefined && data.parent.toString().indexOf(ganttProjectId) == 0){
                      data[namespacePrefix+"Project__c"] = data.parent;
                      data[namespacePrefix+"Parent_Task__c"] = null;
                  }else if (data.parent !== undefined || data.parent != ''){
                      data[namespacePrefix+"Parent_Task__c"] = data.parent;
                  }

                  var sdt = gantt.date.parseDate(data.start_date,DEFAULT_SERVER_DATE_FORMAT);
                  var formatFunc = gantt.date.date_to_str("%Y-%m-%d");

                  data.start_date = formatFunc(sdt);
                  data.end_date = formatFunc(gantt.calculateEndDate(gantt.getTask(id)));
                  data[namespacePrefix+"Start_Date__c"] = data.start_date;
                  //data[namespacePrefix+"Constraint_Type__c"] = data.constraint_type;
                  /*data[namespacePrefix+"Constraint_Type__c"] = gantt.getConstraintType(data);*/

                  if(data.constraint_date ){
                      if(data[namespacePrefix+"Constraint_Type__c"] != data.constraint_type){
                          data.constraint_type = data[namespacePrefix+"Constraint_Type__c"];
                      }
                  /* if(data[namespacePrefix+"Task_Constraint_Date__c"] == ""){
                          if(data.constraint_type == 'snet' || data.constraint_type == 'snlt' || data.constraint_type == 'mso'){
                              data.constraint_date = formatFunc(gantt.date.parseDate(data.start_date,DEFAULT_SERVER_DATE_FORMAT));;
                          }else if(data.constraint_type == 'fnet' || data.constraint_type == 'fnlt' || data.constraint_type == 'mfo'){
                              data.constraint_date =  formatFunc(gantt.date.parseDate(data.end_date,DEFAULT_SERVER_DATE_FORMAT));
                          }
                      } */
                      data[namespacePrefix+"Task_Constraint_Date__c"] = formatFunc(gantt.date.parseDate(data.constraint_date,DEFAULT_SERVER_DATE_FORMAT));
                  }
                  data[namespacePrefix+"Duration__c"] = data.duration;
                  data["wbs"] = gantt.getTask(id).$wbs;
                  data["oldwbs"] = gantt.getTask(id).oldwbs;
                  data["parent"] = gantt.getTask(id).parent;
                  data["oldparent"] = gantt.getTask(id).oldparent;
                  //console.log(">>>>>>>>>>>>>>>>");

                  if(data[namespacePrefix+"progress"] == ""){
                      data[namespacePrefix+"Percent_Complete__c"] = 0;
                  }else{
                      data[namespacePrefix+"Percent_Complete__c"] = data["progress"];
                  }

                  if(data["calendar_id"] == 'custom'){
                      data[namespacePrefix+"Include_Weekends__c"] = true;
                  }else{
                      data[namespacePrefix+"Include_Weekends__c"] = false;
                  }

              }

              var jsonData = JSON.stringify(data);

              return delayedCall({
                  entity: entity,
                  action: action,
                  id: id,
                  entityData: jsonData
              });
          }
      })
  }

  // eslint-disable-next-line no-console
//console.log("initializeGantt....completed");
}

var isColumnChanged = false;
function showHideColumns() {
  var menu = new dhtmlXMenuObject();
  menu.setIconsPath("../common/sample_images/");
  menu.renderAsContextMenu();
  menu.setSkin("dhx_terrace");

  gantt.attachEvent("onContextMenu", function(taskId, linkId, event) {
      var x = event.clientX + document.body.scrollLeft
              + document.documentElement.scrollLeft, y = event.clientY
              + document.body.scrollTop + document.documentElement.scrollTop;

      var target = (event.target || event.srcElement);
      var column_id = target.getAttribute("column_id");
      menu.clearAll();

      addColumnsConfig();
      if (column_id) {
          addColumnToggle(column_id);
      }
      if(isFromImportFile == false){
          menu.showContextMenu(x, y);
      }
      return false;
  });

  menu.attachEvent("onHide", function(id) {
      if(isColumnChanged){
          isColumnChanged = false;
          saveOverAllGanttView(function(){
              gantt.clearAll();
              loadProjectGanttData();
              if(expandAll) {
                  expandAllTaskTree();
              } else {
                  collapseAllTaskTree();
              }
          });
      }
      //gantt.refreshData();
  })

  menu.attachEvent("onClick", function(id, zoneId, cas) {
      var parts = (id + "").split("#");
      var is_toggle = parts[0] == "toggle", column_id = parts[1] || id;

      var column = gantt.getGridColumn(column_id);

      if (column) {
          isColumnChanged = true;
          var visible = !is_toggle ? menu.getCheckboxState(id) : false;
          column.hide = !visible;
          if(column.hide){
              delete gantt_columns[column.name];
          }else{
              gantt_columns[column.name] = true;
          }
      }
      return true;
  });

  function addColumnToggle(column_name) {
      var column = gantt.getGridColumn(column_name);
      var label = getColumnLabel(column);

      // add prefix to distinguish from the same item in 'show columns' menu
      var item_id = "toggle#" + column_name
      menu.addNewChild(null, -1, item_id, "Hide '" + label + "'", false);
      menu.addNewSeparator(item_id);
  }

  function addColumnsConfig() {
      menu.addNewChild(null, -1, "show_columns", "Show columns:", false);
      var columns = gantt.config.columns;

      for (var i = 0; i < columns.length; i++) {
          var ganttColumn = columns[i];
          var checked = (!columns[i].hide), itemLabel = getColumnLabel(columns[i]);
          if(ganttColumn.name != 'buttons'){
              menu.addCheckbox("child", "show_columns", i, columns[i].name,itemLabel, checked);
          }
      }
  }

  function getColumnLabel(column) {
      if (column == null)
          return '';

      var locale = gantt.locale.labels;
      var text = column.label !== undefined ? column.label : locale["column_"
              + column.name];

      text = text || column.name;
      return stripHtml(text);
  }
}

function stripHtml(html){
  // Create a new div element
  var temporalDivElement = document.createElement("div");
  // Set the HTML content with the providen
  temporalDivElement.innerHTML = html;
  // Retrieve the text property of the element (cross-browser support)
  return temporalDivElement.textContent || temporalDivElement.innerText || "";
}

$(document).ready(function() {
  initGantt();

});



// function saveOverAllGanttView(cb) {
//   GANTT_SCALE = getScaleConfig(GANTT_VIEW_SCALE);
//   VISIBLE_COLUMNS = getGanttVisibleColumnNames();
//
//   if (OVER_ALL_GANTT_VIEW != '' && GANTT_SCALE != '') {
//       saveOverAllGanttViewAndScale(OVER_ALL_GANTT_VIEW, GANTT_SCALE,
//               VISIBLE_COLUMNS,function(){
//                   return cb();
//               });
//   } else{
//       return cb();
//   }
//
// }
// function saveOverAllGanttViewAndScale(view, scale, visible_columns,cb) {
//   if(typeof userPreferenceSetting == 'string'){
//       userPreferenceSetting = {};
//   }
//   userPreferenceSetting.Over_all_Gantt_View_Project_Filter = view;
//   userPreferenceSetting.Gantt_View_Scale = scale;
//   userPreferenceSetting.Gantt_Columns = visible_columns;
//   userPreferenceSetting.isGanttCollapse = $('#expandAllTasks').hasClass('rotate-180') ? true : false;
//   var mapUserPreferenceSetting = JSON.stringify(userPreferenceSetting);
//   Visualforce.remoting.Manager.invokeAction(_PageActions.updateOverAllGanttViewAndScaleSetting,mapUserPreferenceSetting,
//   function(result, event) {
//       if (event.status) {
//           return cb();
//
//       }else if (event.type === 'exception') {
//           $.notify(event.message, {
//               position : 'top left',
//               style : 'bootstrap',
//               className : 'error'
//           });
//           return cb();
//       }else {
//           $.notify('Opps... Data not saved', {
//               position : 'top left',
//               style : 'bootstrap',
//               className : 'info'
//           });
//           return cb();
//       }
//   });
//
// }
// function getScaleConfig(value) {
//   var selectedScale = ''
//   switch (value) {
//   case GANTT_VIEWS["DAYS"]:
//       selectedScale = "DAYS";
//       break;
//   case GANTT_VIEWS["WEEKS"]:
//       selectedScale = "WEEKS";
//       break;
//   case GANTT_VIEWS["MONTHS"]:
//       selectedScale = "MONTHS";
//       break;
//   case GANTT_VIEWS["YEARS"]:
//       selectedScale = "YEARS";
//       break;
//   }
//   return selectedScale
// }





</script>
