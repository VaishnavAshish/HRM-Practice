<script>

    function addNewTask(modalId, formId, accountId) {
        var taskData = createJSONForFormData(formId);
        console.log(projectName);
        let taskUserEmail=$("#assigned_user option:selected").text();

        let userData={ userEmail:'',billRate:'0.00',costRate:'0.00',user_role:'',assignment_id:null}
        if(taskUserEmail!=''&&taskUserEmail!=undefined&&taskUserEmail!=null){
             userData.userEmail= $("#assigned_user option:selected").attr('email_id');
             userData.assignment_id = $('#assigned_user option:selected').attr('pr_as_id');
             userData.billRate=$("#assigned_user option:selected").attr('billRate');
             userData.costRate=$("#assigned_user option:selected").attr('costRate');
             taskData.user_role=$("#assigned_user option:selected").attr('role');
        }
        taskData.billable=projectBillable;
        clearError("#task_name");
        if(taskData.task_name) {
          checkFormValidation("#addTaskForm");
          if (taskData.due_date!='' && taskData.start_date > taskData.due_date) {
            addError("#tsk_due_date", "Please enter end date greater than start date");
          } else if(!$("#addTaskForm").hasClass('has-error')) {
            showLoader('#globalLoader');
            $.ajax({
                type: 'POST',
                url : '/addTask',
                contentType: 'application/json',
                dataType: 'json',
                data : JSON.stringify({"accountId":accountId, "taskData":taskData, "projectId": projectId,"projectName": projectName,"userData":userData}),
                success : function(response){
                    console.log(response);
                    if(response.success == true) {
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'success', response.message, 4000);
                        location.reload();
                    } else {
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'error', response.message, 4000);
                    }
                },
                error: function(response){
                        console.log(response);
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                }
            });
          }
        } else {
            addError("#task_name", 'Please enter task title');
        }
        // taskData.task_desc = $('#taskDescription').summernote('code');
    }

    function updateTaskDetails(taskId, formId, projectId) {

        checkFormValidation(formId);
        if(taskId == undefined && taskId == '') {
            location.reload();
        } else {
            var taskDetailsData = createJSONForFormData(formId);
            taskDetailsData.project_id = projectId;
            taskDetailsData.taskId = taskId;
            taskDetailsData.assignment_id = null;
            taskDetailsData.user_role = $('#assigned_user option:selected').attr('user_role');
            if($('#assigned_user option:selected').attr('pr_as_id')) {
                 //taskDetailsData.assignment_id = $('#assigned_user option:selected').attr('pr_as_id');
                 taskDetailsData.assignment_id = $('#assigned_user option:selected').attr('pr_as_id');
            }
            console.log("task details update method called");
            console.log(taskDetailsData);
            let taskUserEmail=($("#assigned_user option:selected").text()).trim();
            let userData={ userEmail:'',billRate:'0.00',costRate:'0.00',user_role:''}
            if(taskUserEmail!=''&&taskUserEmail!=undefined&&taskUserEmail!=null){
                userData.userEmail= $("#assigned_user option:selected").attr('email_id');
                userData.billRate=$("#assigned_user option:selected").attr('billRate');
                userData.costRate=$("#assigned_user option:selected").attr('costRate');
                //taskDetailsData.user_role=$("#assigned_user option:selected").attr('role');
            }
            if (taskDetailsData.end_date && taskDetailsData.start_date > taskDetailsData.end_date) {
              addError("#tskDetail_due_date", "Please enter end date greater than start date");
            } else if(!$(formId).hasClass('has-error')) {
                showLoader('#globalLoader');
                $.ajax({
                    type: 'POST',
                    url : '/editTask',
                    contentType: 'application/json',
                    dataType: 'json',
                    data : JSON.stringify({"taskDetails":taskDetailsData,"userData":userData}),
                    success : function(response){
                        console.log(response);
                        if(response.success == true) {
                            $('[save-btn]').attr('disabled',true);
                            setTimeout(() => {
                                hideLoader('#globalLoader');
                                showGlobalToast('#globalToast', 'success', "Task details updated successfully", 4000);
                            }, 2000);
                        } else {
                            hideLoader('#globalLoader');
                            showGlobalToast('#globalToast', 'error', response.message, 4000);
                        }
                    },
                    error: function(response){
                            console.log(response);
                            hideLoader('#globalLoader');
                            showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                    }
                });
            }
        }
    }

    function deleteTask(taskId, projectId) {
        showLoader('#globalLoader');
        if(projectId == undefined && projectId == '') {
            location.reload();
        } else {
            console.log("deleteProject called");
            $.ajax({
                type: 'POST',
                url : '/deleteTask',
                contentType: 'application/json',
	            dataType: 'json',
                data : JSON.stringify({"taskId":taskId}),
                success : function(response){
                    console.log(response);
                    if(response.success == true) {
                        hideLoader('#globalLoader');
                        window.location.href = '/project-details?projectId='+projectId+'#tasks';
                    } else {
                        hideLoader('#globalLoader');
                        showGlobalToast('#globalToast', 'error', response.message, 4000);
                    }
                },
                error: function(response){
                        console.log(response);
                        hideLoader('#globalLoader');
                        showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                }
            });
        }
    }

function loadMoreTaskWithSerachCrieteria(){
    showLoader('#globalLoader');

    let offset=$("#offset").text();

    showLoader('#globalLoader');

    let searchText=$("#searchTaskName").val();
    let url = new URL(window.location.href);
    let projectId=getURLParameter("projectId");
    $.ajax({
          type: 'POST',
          url : '/findTaskByName',
          contentType: 'application/json',
          dataType: 'json',
          data:JSON.stringify({"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset}),
           success : function(response){
               if(response.success){
                    hideLoader('#globalLoader');
                    console.log(response.tasks);
                    if(response.tasks.length>0){
                        /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
                        response.tasks.forEach(function(task){
                            setDataToCard(task,false);
                        })
                    }else{
                        $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
                        /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
                    }
                    $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
                    let noOfRecord=parseInt($("#offset").text());
                    if(parseInt($("#totalRecordCount").text())>parseInt($("#offset").text())){
                        $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
                    }else{
                        $(".slds-button[loadItemId]").hide();
                    }
                    hideLoader('#globalLoader');
               }

            },
           error: function(response){
                console.log('error is : '+response);
                hideLoader('#globalLoader');
                $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
                showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
            }
        });


}

function loadMoreTask(isClearSearch){
    let searchText  = $("#searchTaskName").val();
    if(searchText != '' && searchText != null && searchText != undefined){
        return loadMoreTaskWithSerachCrieteria()
    } 
    showLoader('#globalLoader');
    let offset;
    if(isClearSearch==true){
        offset=0;
        $("#offset").text('0');
        $('#taskSortWrapper').html('');
    }else{
        offset=$("#offset").text();
    }
    showLoader('#globalLoader');
    //let searchText=$("#searchTaskName").val();
    let url = new URL(window.location.href);
    let projectId=getURLParameter("projectId");
    $.ajax({
          type: 'POST',
          url : '/loadMoreTasks',
          contentType: 'application/json',
          dataType: 'json',
          data:JSON.stringify({"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset}),
           success : function(response){
               if(response.success){
                    hideLoader('#globalLoader');
                    console.log(response.tasks);
                    if(response.tasks.length>0){
                        /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
                        response.tasks.forEach(function(task){
                            if(task)
                                setDataToCard(task,true);
                        })
                    }else{
                        $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
                        /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
                    }
                    $("#totalRecordCount").text(response.count);
                    $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
                    let noOfRecord=parseInt($("#offset").text());
                    if(parseInt($("#totalRecordCount").text())>parseInt($("#offset").text())){
                        $(".slds-button[loadItemId]").show();
                        $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
                    }else{
                        $(".slds-button[loadItemId]").hide();
                    }
                    hideLoader('#globalLoader');
               }

            },
           error: function(response){
                console.log('error is : '+response);
                hideLoader('#globalLoader');
                $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
                showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
            }
        });


}
function findTaskByName(){
        $("#noTaskFound").addClass('slds-hide');
        showLoader('#globalLoader');

        $(".slds-button[loadItemId]").show();
        $("#offset").text("0");

        let searchText=$("#searchTaskName").val();
        let url = new URL(window.location.href);
        let projectId=getURLParameter("projectId");
        $.ajax({
              type: 'POST',
              url : '/findTaskByName',
              contentType: 'application/json',
              dataType: 'json',
              data:JSON.stringify({"searchText":searchText,"searchField":"name","project_id":projectId}),
               success : function(response){
                   if(response.success){
                        hideLoader('#globalLoader');
                        console.log(response.tasks);
                        $("#taskSortWrapper").html('');
                        if(response.tasks.length>0){
                            /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
                            response.tasks.forEach(function(task){
                                if(searchText=='')
                                    setDataToCard(task,true);
                                else
                                    setDataToCard(task);
                            })
                        }else{
                            $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
                            /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
                        }
                        $("#totalRecordCount").text(response.count);
                        $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
                        /*let searchFilter=$("#selectedFilter").text();*/
                        let noOfRecord=parseInt($("#offset").text());
                        if(parseInt($("#totalRecordCount").text())>parseInt($("#offset").text())){

                            $(".slds-button[loadItemId]").show();
                            $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
                        }else{
                            $(".slds-button[loadItemId]").hide();
                        }
                   }

                },
               error: function(response){
                    console.log('error is : '+response);
                    hideLoader('#globalLoader');
                    $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
                    showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                }
            });

    }
    function setDataToCard(task,isDraggable){
        var billable = '';
        if(task.billable) {
            billable = 'Billable';
        } else {
            billable = 'Non Billable';
        }
        var icon = '';
        // if(task.status == 'Not Started') {
        //     icon = `<i class="fa fa-ban text-dull"></i>`;
        // } else if(task.status == 'In Progress') {
        //     icon = `<i class="fa fa-spinner text-orange"></i>`;
        // } else if(task.status == 'At Risk') {
        //     icon = `<i class="fa fa-exclamation-circle text-red"></i>`;
        // } else if(task.status == 'Completed') {
        //     icon = `<i class="fa fa-check-circle text-green"></i>`;
        // }

        let imgSrc,title;
        if(task.user_id){
            imgSrc = "/getUserPicture/${task.user_id}";
            title = 'title="'+task.user_first_name;
            if(task.user_last_name){
                title+=" "+task.user_last_name;
            }
            title+='('+task.user_role+')"';
        }else{
            imgSrc = 'img/avatar1.jpg';
            title = 'title="Person"';
        }

        let liOpen=liClose=kwClass=kwSpan='';
        if(isDraggable==true){
            liOpen='<li id="'+task.id+'" >';
            liClose = '</li>';
            kwClass = 'kw-task-item';
            kwSpan = '<span class="kw-drag-handle slds-p-around_small" title="Drag & Drop to Reorder"> </span>';
        }

        let taskTr = `${liOpen}
        <div class=" slds-m-bottom_medium slds-p-around_small line-around ${kwClass}">
        <div class="slds-grid slds-wrap slds-grid_pull-padded">
            <div class="slds-size_1-of-1 slds-medium-size_1-of-1  slds-large-size_5-of-12 slds-p-horizontal_small">
                <div class="text-size-11 text-dull text-uppercase slds-p-bottom_xx-small">
                    ${kwSpan}
                    `+ task.record_id +`
                    <span class="slds-badge slds-m-left_small">
                        `+ billable +`
                    </span>
                </div>
                <div class="sm-bpd-15">
                    <a href="/task-details?taskId=`+task.id+`#details">
                         `+ task.name +`
                    </a>
                </div>
            </div>

            <div class="slds-size_1-of-1 slds-medium-size_1-of-1  slds-large-size_7-of-12 slds-p-horizontal_small">
                <div class="slds-grid slds-wrap slds-grid_pull-padded">

                    <div class="slds-size_1-of-1 slds-medium-size_3-of-12 slds-p-horizontal_small sm-tpd-15">
                        <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                            Status
                        </div>
                        <div>
                                `+ task.status +`
                        </div>
                    </div>

                    <div class="slds-size_1-of-1 slds-medium-size_6-of-12 slds-p-horizontal_small">
                        <div class="slds-grid slds-grid_pull-padded">
                            <div class="slds-size_1-of-2 slds-p-horizontal_small">
                                <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                    Start Date
                                </div>
                                <div>

                                        `+ task.startDateFormatted +`
                                </div>
                            </div>
                            <div class="slds-size_1-of-2 slds-p-horizontal_small">
                                <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                    Due Date
                                </div>
                                <div>
                                        `+ task.endDateFormatted +`
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="slds-size_1-of-1 slds-medium-size_3-of-12 slds-p-horizontal_small sm-tpd-15">
                        <div class="slds-grid">
                            <div class="slds-has-flexi-truncate">
                                <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                                    Assigned
                                </div>
                                <div>
                                    <span class="slds-avatar slds-avatar_small slds-avatar_circle cursor-pointer">
                                        <img alt="Person name" src="${imgSrc}" ${title}>    
                                        </span>
                                </div>
                            </div>
                            <div class="slds-col--bump-left slds-p-left_x-small">
                                <a href="/task-details?taskId=`+ task.id +`" class="slds-button slds-button_icon" title="Edit">
                                    <i class="fa fa-edit text-blue fs-lg text-size-18"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    ${liClose}`;
        $("#taskSortWrapper").append(taskTr);
        if(isDraggable==true){
            bindTaskDragEventListner("#taskSortWrapper");
        }
    }
</script>
