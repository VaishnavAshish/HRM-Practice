<script>
var lastSearchText;
    $(function(){
        lastSearchText = $("#searchTaskName").val();
        bindTaskDragEventListner("#taskSortWrapper");
    })

    function setBillCostRate(ele, fromModal){
        var billRate = 0.0;
        var costRate = 0.0;
        if(fromModal == "task") {
            billRate = $("option:selected", ele).attr('billrate');
            costRate = $("option:selected", ele).attr('costrate');
        } else {
            let selectedResource=$("#project_user option:selected").val();
            let userList=<%- JSON.stringify(userList) %>;
            let selectedRes= userList.filter(resource=>resource.id==selectedResource);
            if(selectedRes.length>0){
                billRate = selectedRes[0].bill_rate;
                costRate = selectedRes[0].cost_rate;
            }
        }

        $(ele).closest('div[modal-div]').find('input[bill-rate]').val(billRate);
        $(ele).closest('div[modal-div]').find('input[cost-rate]').val(costRate);
    }


    function updateAssignRole(ele) {
        var defaultRole = $("option:selected", ele).attr('role');
        var userId = $("option:selected" ,ele).val();
        console.log(defaultRole);
        var projectAssginmentUser =  <%- JSON.stringify(resUsers) %>
        var assginedUserWithRole=projectAssginmentUser.filter(assignedUser=>{
             return ((assignedUser.id==userId)&&(assignedUser.role==defaultRole));
        });
        console.log(assginedUserWithRole);
        if(assginedUserWithRole.length>0){
            $(ele).closest('div[modal-div]').find('select[name="user_role"]').val('');
        }else{
            $(ele).closest('div[modal-div]').find('select[name="user_role"]').val(defaultRole);
        }
        checkProjectAssignment($("#project_user_role"));
    }
    function checkProjectAssignment(ele){
        var userRole=$("option:selected", ele).val();
        var userId=$("#project_user option:selected").val();
        var projectAssginmentUser =  <%- JSON.stringify(resUsers) %>
        var assginedUserWithRole=projectAssginmentUser.filter(assignedUser=>{
            return ((assignedUser.id==userId)&&(assignedUser.role.trim()==userRole.trim()));
        });
        console.log(assginedUserWithRole);
        if(assginedUserWithRole.length>0){
            $(ele).val('');
        }
    }

    function bindTaskDragEventListner(element) {
        $(element).sortable({
            handle: '.kw-drag-handle',
            onDrop: function ($item, container, _super) {
                _super($item, container);
                let droppedTaskId = $item[0].id;
                let targetContainer = $($item).next('li')
                let targetContainerId = null
                if (targetContainer.length > 0) {
                    targetContainerId = targetContainer[0].id
                }
                //prevSortOrder: "<%= project.task_sort_order %>"
                indexToPushItemWithNullTarget = parseInt($("#offset").text());
                if(parseInt($("#totalRecordCount").text()) <= parseInt($("#offset").text())){
                    indexToPushItemWithNullTarget = null;
                }
                let payload,parentId=getURLParameter('taskId');
                let projectId = <% if(project.id){ %>
                                    '<%= project.id %>' 
                                <%}else{%>
                                    '<%= taskDetails.project_id %>'
                                <% } %> ; 
                if(parentId){
                    payload={ project_id: projectId,"isSubtask":true,"parentId":parentId, dropTaskId: droppedTaskId, targetContainerId: targetContainerId , indexToPushItemWithNullTarget : indexToPushItemWithNullTarget  }
                }else{
                    payload={ project_id: projectId, dropTaskId: droppedTaskId, targetContainerId: targetContainerId , indexToPushItemWithNullTarget : indexToPushItemWithNullTarget  };
                }
                $.ajax({
                    type: 'POST',
                    url: '/updateTaskSortOrder',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(payload),
                    success: function (response) {
                        if (response.success) {
                            hideLoader('#globalLoader');
                            //closeModal(modalId);
                            showGlobalToast('#globalToast', 'success', response.message, 4000);
                            //location.reload(true);
                            //setTimeout(location.reload(),5000);
                        }
                    },
                    error: function (response) {
                        console.log('error is : ' + JSON.stringify(response));
                        hideLoader('#globalLoader');
                        //closeModal(modalId);
                        showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                    }
                });
            }
        });
    }


    function addNewTask(modalId, formId, accountId, isSubtask, parent_id, project_id,project_name, billable) {
        let selectedAssignedUser,userData={},payload;
        if(isSubtask==true){
            selectedAssignedUser = '#assigned_user_in_modal option:selected';
        }else{
            selectedAssignedUser = '#assigned_user option:selected';
        }
        var taskData = createJSONForFormData(formId);
        userData.userId = $(selectedAssignedUser).val();
        let taskUserEmail=$(selectedAssignedUser).text();

        userData={ userEmail:'',billRate:'0.00',costRate:'0.00',user_role:'',assignment_id:null}
        if(taskUserEmail!=''&&taskUserEmail!=undefined&&taskUserEmail!=null){
             userData.userEmail= $(selectedAssignedUser).attr('email_id');
             userData.assignment_id = $(selectedAssignedUser).attr('pr_as_id');
             userData.billRate=$(selectedAssignedUser).attr('billRate');
             userData.costRate=$(selectedAssignedUser).attr('costRate');
             taskData.user_role=$(selectedAssignedUser).attr('role');
        }
        taskData.billable=billable;
        clearError("#task_name");
        if(taskData.task_name) {
          checkFormValidation("#addTaskForm");
          if (taskData.due_date!='' && taskData.start_date > taskData.due_date) {
            addError("#tsk_due_date", "Please enter end date greater than start date");
          } else if(!$("#addTaskForm").hasClass('has-error')) {
            showLoader('#globalLoader');
            if(isSubtask==true){
                taskData.assigned_user = taskData.assigned_user_in_modal;
                payload = {"accountId":accountId, "taskData":taskData, "projectId": project_id,"projectName": project_name,"userData":userData,"parent_id":parent_id,"isSubtask":isSubtask};
            }else{
                payload = {"accountId":accountId, "taskData":taskData, "projectId": projectId,"projectName": projectName,"userData":userData,"isSubtask":isSubtask};
            }
            $.ajax({
                type: 'POST',
                url : '/addTask',
                contentType: 'application/json',
                dataType: 'json',
                data : JSON.stringify(payload),
                success : function(response){
                    console.log(response);
                    if(response.success == true) {
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'success', response.message, 4000);
                        location.reload();
                    } else {
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'error', response.message, 4000);
                    }
                },
                error: function(response){
                        console.log(response);
                        hideLoader('#globalLoader');
                        closeModal(modalId);
                        showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                }
            });
          }
        } else {
            addError("#task_name", 'Please enter task title');
        }
        // taskData.task_desc = $('#taskDescription').summernote('code');
    }



    function updateTaskDetails(taskId, formId, projectId, parentId) {

        checkFormValidation(formId);
        if(taskId == undefined && taskId == '') {
            location.reload();
        } else {
            var taskDetailsData = createJSONForFormData(formId);
            taskDetailsData.project_id = projectId;
            taskDetailsData.taskId = taskId;
            taskDetailsData.assignment_id = null;
            taskDetailsData.user_role = $('#assigned_user option:selected').attr('user_role');
            if($('#assigned_user option:selected').attr('pr_as_id')) {
                 //taskDetailsData.assignment_id = $('#assigned_user option:selected').attr('pr_as_id');
                 taskDetailsData.assignment_id = $('#assigned_user option:selected').attr('pr_as_id');
            }
            console.log("task details update method called");
            console.log(taskDetailsData);
            let taskUserEmail=($("#assigned_user option:selected").text()).trim();
            let userData={ userEmail:'',billRate:'0.00',costRate:'0.00',user_role:''}
            if(taskUserEmail!=''&&taskUserEmail!=undefined&&taskUserEmail!=null){
                userData.userEmail= $("#assigned_user option:selected").attr('email_id');
                userData.billRate=$("#assigned_user option:selected").attr('billRate');
                userData.costRate=$("#assigned_user option:selected").attr('costRate');
                //taskDetailsData.user_role=$("#assigned_user option:selected").attr('role');
            }
            if (taskDetailsData.end_date && taskDetailsData.start_date > taskDetailsData.end_date) {
              addError("#tskDetail_due_date", "Please enter end date greater than start date");
            } else if(!$(formId).hasClass('has-error')) {
                showLoader('#globalLoader');
                $.ajax({
                    type: 'POST',
                    url : '/editTask',
                    contentType: 'application/json',
                    dataType: 'json',
                    data : JSON.stringify({"taskDetails":taskDetailsData,"userData":userData,"parentId":parentId}),
                    success : function(response){
                        console.log(response);
                        if(response.success == true) {
                            $('[save-btn]').attr('disabled',true);
                            setTimeout(() => {
                                hideLoader('#globalLoader');
                                showGlobalToast('#globalToast', 'success', "Task details updated successfully", 4000);
                            }, 2000);
                        } else {
                            hideLoader('#globalLoader');
                            showGlobalToast('#globalToast', 'error', response.message, 4000);
                        }
                    },
                    error: function(response){
                            console.log(response);
                            hideLoader('#globalLoader');
                            showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                    }
                });
            }
        }
    }

    function deleteTask(taskId, projectId,isSubtask,parentId) {
        showLoader('#globalLoader');
        if(projectId == undefined && projectId == '') {
            location.reload();
        } else {
            console.log("deleteTask called");
            let payload={},redirectURL='';
            if(isSubtask){
                payload={"taskId":taskId,"isSubtask":isSubtask};
                redirectURL='/task-details?taskId='+parentId+'#subtasks';
            }else{
                payload={"taskId":taskId};
                redirectURL='/project-details?projectId='+projectId+'#tasks';
            }
            $.ajax({
                type: 'POST',
                url : '/deleteTask',
                contentType: 'application/json',
	            dataType: 'json',
                data : JSON.stringify(payload),
                success : function(response){
                    console.log(response);
                    if(response.success == true) {
                        hideLoader('#globalLoader');
                        window.location.href = redirectURL;
                    } else {
                        hideLoader('#globalLoader');
                        showGlobalToast('#globalToast', 'error', response.message, 4000);
                    }
                },
                error: function(response){
                        console.log(response);
                        hideLoader('#globalLoader');
                        showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
                }
            });
        }
    }

function loadMoreTaskWithSearchCrieteria(isSubtask,projectId){
    showLoader('#globalLoader');

    let offset=$("#offset").text();

    showLoader('#globalLoader');

    let searchText=$("#searchTaskName").val();
    let url = new URL(window.location.href);
    let parentId,payload;
    if(isSubtask){
        parentId=getURLParameter("taskId");
        payload={"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset,"isSubtask":true,"parentId":parentId};
    }else{
        projectId=getURLParameter("projectId");
        payload={"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset};
    }
    $.ajax({
          type: 'POST',
          url : '/findTaskByName',
          contentType: 'application/json',
          dataType: 'json',
          data:JSON.stringify(payload),
           success : function(response){
               if(response.success){
                    hideLoader('#globalLoader');
                    console.log(response.tasks);
                    if(response.tasks.length > 0){
                        $("#noTaskFound").addClass('slds-hide');
                        /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
                        response.tasks.forEach(function(task){
                            setDataToCard(task,false);
                        })
                    }else{
                        $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
                        /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
                    }
                    $("#totalRecordCount").text(response.count);
                    $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
                    let noOfRecord=parseInt($("#offset").text());
                    if(parseInt($("#totalRecordCount").text()) > parseInt($("#offset").text())){
                        $(".slds-button[loadItemId]").show();
                        // $('#noTaskFound').hide();
                        $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
                    }else{
                        $(".slds-button[loadItemId]").hide();
                        // $('#noTaskFound').hide();
                    }
                    hideLoader('#globalLoader');
               }

            },
           error: function(response){
                console.log('error is : '+response);
                hideLoader('#globalLoader');
                $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
                showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
            }
        });


}



function loadMoreTask(isClearSearch,isSubtask,projectId){
    let searchText  = $("#searchTaskName").val();
    if(searchText != '' && searchText != null && searchText != undefined){
        return loadMoreTaskWithSearchCrieteria(isSubtask,projectId)
    }
    showLoader('#globalLoader');
    let offset;
    if(isClearSearch==true){
        offset=0;
        $("#offset").text('0');
        $('#taskSortWrapper').html('');
    }else{
        offset=$("#offset").text();
    }
    showLoader('#globalLoader');
    //let searchText=$("#searchTaskName").val();
    let url = new URL(window.location.href);
    let parentId,payload;
    if(isSubtask){
        parentId=getURLParameter("taskId");
        payload={"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset,"isSubtask":true,"parentId":parentId};
    }else{
        projectId=getURLParameter("projectId");
        payload={"searchText":searchText,"searchField":"name","project_id":projectId,"offset":offset};
    }
    $.ajax({
          type: 'POST',
          url : '/loadMoreTasks',
          contentType: 'application/json',
          dataType: 'json',
          data:JSON.stringify(payload),
           success : function(response){
               if(response.success){
                    hideLoader('#globalLoader');
                    console.log(response.tasks);
                    if(response.tasks.length>0){
                        $("#noTaskFound").addClass('slds-hide');
                        /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
                        response.tasks.forEach(function(task){
                            if(task)
                                setDataToCard(task,true);
                        })
                    }else{
                        $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
                        /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
                    }
                    $("#totalRecordCount").text(response.count);
                    $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
                    let noOfRecord=parseInt($("#offset").text());
                    if(parseInt($("#totalRecordCount").text())>parseInt($("#offset").text())){
                        $(".slds-button[loadItemId]").show();
                        // $('#noTaskFound').hide();
                        $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
                    }else{
                        $(".slds-button[loadItemId]").hide();
                        // $('#noTaskFound').hide();
                    }
                    hideLoader('#globalLoader');
               }

            },
           error: function(response){
                console.log('error is : '+response);
                hideLoader('#globalLoader');
                $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
                showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
            }
        });


}
function findTaskByName(isSubtask,projectId){
        if($("#searchTaskName").val()==lastSearchText){
            return 0;
        }
        lastSearchText=$("#searchTaskName").val();
        $("#offset").text("0");
        $("#taskSortWrapper").html('')
        loadMoreTask(true,isSubtask,projectId);
        // $("#noTaskFound").addClass('slds-hide');
        // showLoader('#globalLoader');
        //
        // $(".slds-button[loadItemId]").show();
        // $("#offset").text("0");
        //
        // let searchText=$("#searchTaskName").val();
        // let url = new URL(window.location.href);
        // let projectId=getURLParameter("projectId");
        // $.ajax({
        //       type: 'POST',
        //       url : '/findTaskByName',
        //       contentType: 'application/json',
        //       dataType: 'json',
        //       data:JSON.stringify({"searchText":searchText,"searchField":"name","project_id":projectId}),
        //        success : function(response){
        //            if(response.success){
        //                 hideLoader('#globalLoader');
        //                 console.log(response.tasks);
        //                 $("#taskSortWrapper").html('');
        //                 if(response.tasks.length>0){
        //                     /*showGlobalToast('#globalToast', 'success',response.message, 4000);*/
        //                     response.tasks.forEach(function(task){
        //                         if(searchText=='')
        //                             setDataToCard(task,true);
        //                         else
        //                             setDataToCard(task);
        //                     })
        //                 }else{
        //                     $("#noTaskFound").removeClass('slds-hide').text('No task found with this search crieteria');
        //                     /*showGlobalToast('#globalToast', 'error','No task found with this search crieteria', 4000);*/
        //                 }
        //                 $("#totalRecordCount").text(response.count);
        //                 $("#offset").text(parseInt($("#offset").text())+parseInt($("#pageRecordNo").text()));
        //                 /*let searchFilter=$("#selectedFilter").text();*/
        //                 let noOfRecord=parseInt($("#offset").text());
        //                 if(parseInt($("#totalRecordCount").text())>parseInt($("#offset").text())){
        //
        //                     $(".slds-button[loadItemId]").show();
        //                     $(".slds-button[loadItemId]").text('Load More ('+noOfRecord+'/'+$("#totalRecordCount").text()+')');
        //                 }else{
        //                     $(".slds-button[loadItemId]").hide();
        //                 }
        //            }
        //
        //         },
        //        error: function(response){
        //             console.log('error is : '+response);
        //             hideLoader('#globalLoader');
        //             $("#noTaskFound").removeClass('slds-hide').text(response.responseJSON.message);
        //             showGlobalToast('#globalToast', 'error', response.responseJSON.message, 4000);
        //         }
        //     });

    }
    function setDataToCard(task,isDraggable){
        var billable = '';
        if(task.billable) {
            billable = 'Billable';
        } else {
            billable = 'Non Billable';
        }
        var icon = '';
        // if(task.status == 'Not Started') {
        //     icon = `<i class="fa fa-ban text-dull"></i>`;
        // } else if(task.status == 'In Progress') {
        //     icon = `<i class="fa fa-spinner text-orange"></i>`;
        // } else if(task.status == 'At Risk') {
        //     icon = `<i class="fa fa-exclamation-circle text-red"></i>`;
        // } else if(task.status == 'Completed') {
        //     icon = `<i class="fa fa-check-circle text-green"></i>`;
        // }

        let imgSrc = ``,title;
        if(task.user_id){
            // title = 'title="'+task.user_first_name;
            // if(task.user_last_name){
            //     title+=" "+task.user_last_name;
            // }
            // title+='('+task.user_role+')"';
            imgSrc = `<span class="slds-avatar slds-avatar_small slds-avatar_circle cursor-pointer">
                        <img alt="Person name" src="/getUserPicture/${task.user_id}" title="${task.user_first_name}${task.user_last_name?task.user_last_name:''}(${task.user_role})">
                      </span>`;
        }

        let liOpen=liClose=kwClass=kwSpan='';
        if(isDraggable==true){
            liOpen='<li id="'+task.id+'" >';
            liClose = '</li>';
            kwClass = 'kw-task-item';
            kwSpan = '<span class="kw-drag-handle slds-p-around_small" title="Drag & Drop to Reorder"> </span>';
        }

        let taskTr = `${liOpen}
        <div class=" slds-m-bottom_medium slds-p-around_small line-around ${kwClass}">
        <div class="slds-grid slds-wrap slds-grid_pull-padded">
            <div class="slds-size_1-of-1 slds-medium-size_1-of-1  slds-large-size_5-of-12 slds-p-horizontal_small">
                <div class="text-size-11 text-dull text-uppercase slds-p-bottom_xx-small">
                    ${kwSpan}
                    `+ task.record_id +`
                    <span class="slds-badge slds-m-left_small">
                        `+ billable +`
                    </span>
                </div>
                <div class="sm-bpd-15">
                    <a href="/task-details?taskId=`+task.id+`#details">
                         `+ task.name +`
                    </a>
                </div>
            </div>


        <div class="slds-size_1-of-1 slds-medium-size_1-of-1  slds-large-size_7-of-12 slds-p-horizontal_small">
            <div class="slds-grid slds-wrap slds-grid_pull-padded">

                <div class="slds-size_1-of-1 slds-medium-size_3-of-12 slds-p-horizontal_small sm-tpd-15">
                    <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                        Status
                    </div>
                    <div>
                            `+ task.status +`
                    </div>
                </div>

                <div class="slds-size_1-of-1 slds-medium-size_6-of-12 slds-p-horizontal_small">
                    <div class="slds-grid slds-grid_pull-padded">
                        <div class="slds-size_1-of-2 slds-p-horizontal_small">
                            <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                Start Date
                            </div>
                            <div>

                                    `+ task.startDateFormatted +`
                            </div>
                        </div>
                        <div class="slds-size_1-of-2 slds-p-horizontal_small">
                            <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                Due Date
                            </div>
                            <div>
                                    `+ task.endDateFormatted +`
                            </div>
                        </div>
                    </div>
                </div>


                <div class="slds-size_1-of-1 slds-medium-size_3-of-12 slds-p-horizontal_small sm-tpd-15">
                    <div class="slds-grid">

                        <div class="slds-has-flexi-truncate">
                            <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
                                                Assigned
                            </div>
                            <div>

                                    ${imgSrc}

                            </div>
                        </div>
                        <div class="slds-col--bump-left slds-p-left_x-small">
                            <a href="/task-details?taskId=`+ task.id +`" class="slds-button slds-button_icon" title="Edit">
                                <i class="fa fa-edit text-blue fs-lg text-size-18"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
${liClose}`;
// <div class="slds-has-flexi-truncate">
//     <div class="slds-truncate text-dull slds-p-bottom_xx-small text-size-11 text-uppercase">
//         Assign To
//     </div>
//     <div>
//         <span class="slds-avatar slds-avatar_small slds-avatar_circle cursor-pointer">
//             <img alt="Person name" src="img/avatar1.jpg" title="`+ task.user_email +`">
//         </span>
//     </div>
// </div>
    $("#taskSortWrapper").append(taskTr);
}

</script>
